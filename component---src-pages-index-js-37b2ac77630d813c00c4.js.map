{"version":3,"sources":["webpack:///./src/contexts/ImageDataContext.js","webpack:///./src/layouts/SEO.js","webpack:///./src/constants/COLORS.js","webpack:///./src/layouts/GlobalStyles.js","webpack:///./src/components/FreeCellCanvas/cells/EmptyCell.js","webpack:///./src/components/FreeCellCanvas/Image.js","webpack:///./src/constants/LAYOUTS.js","webpack:///./src/components/FreeCellCanvas/cells/Card.js","webpack:///./src/components/FreeCellCanvas/decks/FreeDeck.js","webpack:///./src/components/FreeCellCanvas/cells/EmptyWaterMarkCell.js","webpack:///./src/components/FreeCellCanvas/decks/SolvedDeck.js","webpack:///./src/utils/freecell.js","webpack:///./src/components/FreeCellCanvas/decks/StackedDeck.js","webpack:///./src/components/FreeCellCanvas/decks/DraggingDeck.js","webpack:///./src/components/FreeCellCanvas/PuzzleBoard.js","webpack:///./src/components/FreeCellCanvas/index.js","webpack:///./src/components/FreeCellBoard.js","webpack:///./src/pages/index.js"],"names":["React","createContext","Provider","Consumer","ImageDataProvider","render","react_default","a","createElement","value","_this","props","imageData","children","PureComponent","SEO","_ref","description","lang","meta","title","site","_2417117884","data","metaDescription","siteMetadata","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","COLORS","GREY","RED","YELLOW","BLACK","BLUE","Global","createGlobalStyle","_templateObject","GlobalStyles","Fragment","dist","EmptyCell","ReactKonvaCore","x","y","width","height","cornerRadius","fill","stroke","strokeWidth","opacity","CanvasImage","_React$PureComponent","call","this","handleLoad","setState","image","removeEventListener","imageCache","set","handleMoveOver","document","body","style","cursor","handleMoveOut","_this$props","draggable","Object","assign","state","ref","node","imageNode","onMouseOver","onMouseOut","onDragStart","onDragEnd","get","loadPlaceholder","componentDidMount","has","loadImage","componentDidUpdate","oldProps","_this2","src","srcSet","base64","placeholder","window","Image","addEventListener","LRU","max","length","_","key","maxAge","STACKED_CARD_OFFSET_Y","CARD_SHADOW_BLUR","Card","id","_this$props$imageData","childImageSharp","fixed","FreeCellCanvas_Image","shadowColor","shadowOpacity","shadowBlur","shadowOffsetY","cells_Card","Card_Card","FreeDeck","renderCell","i","card","cells_EmptyCell","EmptyWaterMarkCell","_this$props$waterMark","waterMarkData","category","cells_EmptyWaterMarkCell","EmptyWaterMarkCell_EmptyWaterMarkCell","SolvedDeck","renderSolvedSpadeDeck","renderDeck","renderSolvedHeartDeck","renderSolvedDiamondDeck","renderSolvedClubDeck","solvedCards","topCard","spadeSolvedCards","heartSolvedCards","diamondSolvedCards","clubSolvedCards","Freecell","isSolvable","topCardId","droppedCardId","_this$getCardCategory","getCardCategoryAndNumber","topCardCategory","topCardNumber","_this$getCardCategory2","droppedCategory","droppedCardNumber","isCardInStackDraggable","cards","cardInIndex","slice","every","self","_this$getCardColorAnd","getCardColorAndNumber","cardColor","cardNumber","_this$getCardColorAnd2","nextCardColor","nextCardNumber","getCardPosInPuzzleDeck","cardsOfDecks","cardId","j","Error","_cardId$split","split","number","getCardNumber","_cardId$split2","getCardColor","numString","parseInt","StackedDeck","isCardDraggable","dragDisabled","renderCards","map","_this$props2","setRef","DraggingDeck","draggingNode","startDrag","setDraggingDeckRef","decks_StackedDeck","PuzzleBoard","renderStackedDecks","deckOfCards","FreeCellCanvas","getCanvasWidth","getCanvasHeight","getDroppableFreeCells","stageNode","findOne","filter","cell","cellInside","getDroppableSolvedTopCards","getDroppablePuzzleLeafCards","deck","handlePuzzleDeckDragStart","e","target","_Freecell$getCardPosI","gameState","puzzle","deckIndex","cardIndex","_e$target$getClientRe","getClientRect","moveCardsToDrag","handleFreeDeckDragStart","_e$target$getClientRe2","freeCells","free","freeIndex","keys","findIndex","moveFreeCardToDrag","handleDraggingLayerDragStart","cancelBubble","getChildren","each","child","setAttrs","shadowOffset","scaleX","scaleY","handleDraggingLayerDragEnd","draggingCards","pointerClientX","evt","clientX","pointerClientY","clientY","isPosInsideRect","rectX","rectY","rectW","rectH","targetDropCell","find","rect","targetDropFreeCellIndex","_targetDropCell$getCl","targetPosX","targetPosY","animateCardsToPos","moveDraggingCardsToFreeCell","solvedTopCards","_targetDropCell$getCl2","_Freecell$getCardCate","moveDraggingCardsToSolvedDeck","_this$props$prevDragg","prevDraggingCardsPos","targetDropPos","endPosCardId","moveDraggingCardsToPuzzle","setStageRef","draggingStartPos","ImageDataContext_ImageDataProvider","decks_FreeDeck","pos0Card","pos1Card","pos2Card","pos3Card","decks_SolvedDeck","solved","FreeCellCanvas_PuzzleBoard","decks_DraggingDeck","callback","to","duration","easing","Konva","Easings","EaseOut","onFinish","ElasticEaseOut","shadowOffsetX","FreeCellBoard","history","startPos","updatedDeckCards","toDraggingCards","_toConsumableArray","_Object$assign","_this$state","targetDeckIndex","setTimeout","_Object$assign2","_Object$assign3","_this$state2","components_FreeCellCanvas","__webpack_require__","d","__webpack_exports__","query","layouts_SEO","layouts_GlobalStyles","components_FreeCellBoard"],"mappings":"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","file":"component---src-pages-index-js-37b2ac77630d813c00c4.js","sourcesContent":["import React from \"react\"\n\nconst defaultContextValue = {}\n\nconst { Provider, Consumer } = React.createContext(defaultContextValue)\n\nclass ImageDataProvider extends React.PureComponent {\n  render = () => (\n    <Provider value={this.props.imageData}>\n      {this.props.children}\n    </Provider>\n  )\n}\n\nexport { Consumer as default, ImageDataProvider }\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh-TW`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","const COLORS = {\n  GREY: \"#dbd3ca\",\n  RED: \"#a93d2d\",\n  YELLOW: \"#c99d31\",\n  BLACK: \"#4d4d4d\",\n  BLUE: \"#6ca39f\",\n}\n\nexport default COLORS\n","import React from \"react\"\nimport { Normalize } from 'styled-normalize'\nimport { createGlobalStyle } from 'styled-components'\n\nimport COLORS from \"../constants/COLORS\"\n\nconst Global = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=DM+Serif+Text&display=swap');\n  body {\n    font-family: 'DM Serif Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Open Sans', 'Helvetica Neue', sans-serif;\n    background-color: ${COLORS.GREY};\n  }\n`\n\nclass GlobalStyles extends React.PureComponent {\n  render = () => (\n    <>\n      <Normalize />\n      <Global />\n    </>\n  )\n}\n\nexport default GlobalStyles\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Rect } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Rect\"\n\nimport COLORS from \"../../../constants/COLORS\"\n\n\nclass EmptyCell extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0\n  }\n\n  render = () => (\n    <Rect\n      x={this.props.x}\n      y={this.props.y}\n      width={100}\n      height={150}\n      cornerRadius={5}\n      fill=\"transparent\"\n      stroke={COLORS.BLACK}\n      strokeWidth={1}\n      opacity={0.2}\n    />\n  )\n}\n\nexport default EmptyCell\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport LRU from \"lru-cache\"\n\nimport { Image } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Image\"\n\nconst LRUOptions = {\n  max: 500,\n  length: (_, key) => key.length,\n  maxAge: 1000 * 60 * 60 * 3,\n}\n\nclass CanvasImage extends React.PureComponent {\n  static propTypes = {\n    name: PropTypes.string,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    base64: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    src: PropTypes.string,\n    srcSet: PropTypes.string,\n    style: PropTypes.object,\n    draggable: PropTypes.bool.isRequired\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    draggable: false\n  }\n\n  static imageCache = new LRU(LRUOptions)\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      image: CanvasImage.imageCache.get(props.name) || this.loadPlaceholder()\n    }\n  }\n\n  componentDidMount() {\n    if (CanvasImage.imageCache.has(this.props.name) === false) {\n      this.loadImage()\n    }\n  }\n\n  componentDidUpdate(oldProps) {\n    if (\n      CanvasImage.imageCache.has(this.props.name) === false &&\n      oldProps.src !== this.props.src &&\n      oldProps.srcSet !== this.props.srcSet\n    ) {\n      this.loadImage()\n\n      if (this.props.base64) {\n        this.setState(() => ({\n          placeholder: this.loadPlaceholder()\n        }))\n      }\n    }\n  }\n\n  loadPlaceholder() {\n    if (!this.props.base64) {\n      return null\n    }\n\n    const placeholder = new window.Image()\n    placeholder.src = this.props.base64\n    return placeholder\n  }\n\n  loadImage() {\n    this.image = new window.Image()\n    this.image.src = this.props.src\n    this.image.srcSet = this.props.srcSet // [NOTE] not working, maybe canvas image not support srcSet?\n    this.image.addEventListener('load', this.handleLoad)\n  }\n\n  handleLoad = () => {\n    this.setState({\n      image: this.image\n    })\n    this.image.removeEventListener('load', this.handleLoad)\n\n    CanvasImage.imageCache.set(this.props.name, this.image)\n  }\n\n  handleMoveOver = () => {\n    document.body.style.cursor = 'pointer'\n  }\n\n  handleMoveOut = () => {\n    document.body.style.cursor = 'default'\n  }\n\n  render = () => {\n    const { name, x, y, width, height, draggable, style } = this.props\n\n    return (\n      <Image\n        name={name}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        image={this.state.image}\n        draggable={draggable}\n        ref={node => {\n          this.imageNode = node\n        }}\n        {...(draggable && {\n          onMouseOver: this.handleMoveOver,\n          onMouseOut: this.handleMoveOut,\n          onDragStart: () => {}, // [NOTE] handle the drag events by event delegation in State component\n          onDragEnd: () => {}\n        })}\n        {...style}\n      />\n    )\n  }\n}\n\nexport default CanvasImage\n","export const STACKED_CARD_OFFSET_Y = 32\nexport const CARD_SHADOW_BLUR = 6\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport ImageDataConsumer from \"../../../contexts/ImageDataContext\"\nimport Image from \"../Image\"\nimport { CARD_SHADOW_BLUR } from \"../../../constants/LAYOUTS\"\n\nclass Card extends React.PureComponent {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    draggable: PropTypes.bool\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    draggable: false\n  }\n\n  render = () => {\n    const { id, x, y, draggable } = this.props\n    const { base64, width, height, src, srcSet } = this.props.imageData.childImageSharp.fixed\n    \n    return (\n      <Image\n        x={x}\n        y={y}\n        name={id}\n        base64={base64}\n        width={width / 2} // [NOTE] hotfix, for retina resolution support\n        height={height / 2}\n        src={src}\n        srcSet={srcSet}\n        draggable={draggable}\n        style={{\n          shadowColor: \"black\",\n          shadowOpacity: .3,\n          shadowBlur: CARD_SHADOW_BLUR,\n          shadowOffsetY: 2\n        }}\n      />\n    )\n  }\n}\n\nexport default (props) => (\n  <ImageDataConsumer>\n    {(imageData) => <Card imageData={imageData[props.id]} {...props} />}\n  </ImageDataConsumer>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport EmptyCell from \"../cells/EmptyCell\"\nimport Card from \"../cells/Card\"\n\nclass FreeDeck extends React.PureComponent {\n  static propTypes = {\n    pos0Card: PropTypes.object,\n    pos1Card: PropTypes.object,\n    pos2Card: PropTypes.object,\n    pos3Card: PropTypes.object,\n    onDragStart: PropTypes.func.isRequired\n  }\n\n  renderCell = (i) => {\n    const card = this.props[`pos${i}Card`]\n    \n    return (\n      <Group x={(100 + 16) * i} y={0} name={`freecell-${i}`}>\n        <EmptyCell />\n        {card && <Card key={card.id} id={card.id} draggable={true} />}\n      </Group>\n    )\n  }\n\n  render = () => {\n    return (\n      <Group x={139} y={51} name=\"free-deck\" onDragStart={this.props.onDragStart}>\n        {this.renderCell(0)}\n        {this.renderCell(1)}\n        {this.renderCell(2)}\n        {this.renderCell(3)}\n      </Group>\n    )\n  }\n}\n\nexport default FreeDeck","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport ImageDataConsumer from \"../../../contexts/ImageDataContext\"\n\nimport EmptyCell from './EmptyCell'\nimport Image from '../Image'\n\nclass EmptyWaterMarkCell extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    category: PropTypes.string.isRequired,\n    waterMarkData: PropTypes.object\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0\n  }\n\n  render = () => {\n    const { base64, width, height, src, srcSet } = this.props.waterMarkData.childImageSharp.fixed\n\n    return (\n      <Group x={this.props.x} y={this.props.y} name={`${this.props.category}_0`}>\n        <EmptyCell />\n        <Image\n          name={this.props.category}\n          x={20}\n          y={45}\n          base64={base64}\n          width={width / 2} // [NOTE] hotfix, for retina resolution support\n          height={height / 2}\n          src={src}\n          srcSet={srcSet}\n        />\n      </Group>\n    )\n  }\n}\n\n\nexport default (props) => (\n  <ImageDataConsumer>\n    {(imageData) => <EmptyWaterMarkCell waterMarkData={imageData[`${props.category}_watermark`]} {...props} />}\n  </ImageDataConsumer>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport EmptyWaterMarkCell from \"../cells/EmptyWaterMarkCell\"\nimport Card from \"../cells/Card\"\n\nclass SolvedDeck extends React.PureComponent {\n  static propTypes = {\n    spadeSolvedCards: PropTypes.array,\n    heartSolvedCards: PropTypes.array,\n    diamondSolvedCards: PropTypes.array,\n    clubSolvedCards: PropTypes.array\n  }\n\n  static defaultProps = {\n    spadeSolvedCards: [],\n    heartSolvedCards: [],\n    diamondSolvedCards: [],\n    clubSolvedCards: []\n  }\n\n  renderSolvedSpadeDeck = () => this.renderDeck(0, \"spade\")\n  renderSolvedHeartDeck = () => this.renderDeck(1, \"heart\")\n  renderSolvedDiamondDeck = () => this.renderDeck(2, \"diamond\")\n  renderSolvedClubDeck = () => this.renderDeck(3, \"club\")\n\n  renderDeck = (i, category) => {\n    const solvedCards = this.props[`${category}SolvedCards`]\n    const topCard = solvedCards.length > 0 ? solvedCards[solvedCards.length - 1] : null\n    \n    return (\n      <Group x={(100 + 16) * i} y={0}>\n        <EmptyWaterMarkCell category={category} />\n        {topCard && <Card key={topCard.id} id={topCard.id} />}\n      </Group>\n    )\n  }\n\n  render = () => {\n    return (\n      <Group x={687} y={51} name=\"solved-deck\">\n        {this.renderSolvedSpadeDeck()}\n        {this.renderSolvedHeartDeck()}\n        {this.renderSolvedDiamondDeck()}\n        {this.renderSolvedClubDeck()}\n      </Group>\n    )\n  }\n}\n\nexport default SolvedDeck\n","class Freecell {\n  static isSolvable(topCardId, droppedCardId) {\n    const [topCardCategory, topCardNumber] = this.getCardCategoryAndNumber(topCardId)\n    const [droppedCategory, droppedCardNumber] = this.getCardCategoryAndNumber(droppedCardId)\n\n    if (\n      topCardCategory !== droppedCategory ||\n      (topCardNumber + 1) !== droppedCardNumber\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  static isCardInStackDraggable(cards, cardInIndex) {\n    if (cards.length === 0) {\n      return false\n    }\n\n    const stackLength = cards.length\n    if (stackLength === cardInIndex + 1) {\n      return true\n    } \n    \n    return cards.slice(cardInIndex).every((card, i, self) => {\n      if (self.length === i + 1) {\n        return true\n      }\n\n      const [cardColor, cardNumber] = this.getCardColorAndNumber(card.id)\n      const [nextCardColor, nextCardNumber] = this.getCardColorAndNumber(self[i + 1].id)\n\n      return (\n        (cardColor !== nextCardColor) &&\n        (cardNumber === nextCardNumber + 1)\n      )\n    })\n  }\n\n  static getCardPosInPuzzleDeck(cardsOfDecks, cardId) {\n    for (let i = 0; i < cardsOfDecks.length; i++) {\n      for (let j = 0; j < cardsOfDecks[i].length; j++) {\n        if (cardsOfDecks[i][j].id === cardId) {\n          return [i, j]\n        }\n      }\n    }\n\n    throw Error(\"Card not find in puzzle!\")\n  }\n\n  static getCardCategoryAndNumber(cardId) {\n    const [ category, number ] = cardId.split(\"_\")\n    return [ category, this.getCardNumber(number) ]\n  }\n\n  static getCardColorAndNumber(cardId) {\n    const [category, number] = cardId.split(\"_\")\n    return [this.getCardColor(category), this.getCardNumber(number)]\n  }\n\n  static getCardNumber(numString) {\n    switch(numString) {\n      case \"k\":\n        return 13\n      case \"q\":\n        return 12\n      case \"j\":\n        return 11\n      case \"a\":\n        return 1\n      default:\n        return parseInt(numString)\n    }\n  }\n\n  static getCardColor(category) {\n    switch(category) {\n      case \"club\":\n      case \"spade\":\n        return \"black\"\n      case \"heart\":\n      case \"diamond\":\n        return \"red\"\n      default:\n        throw Error(\"Unknown card category!\")\n    }\n  }\n}\n\nexport default Freecell\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group, Rect } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Rect\"\n\nimport Card from \"../cells/Card\"\nimport Freecell from \"../../../utils/freecell\"\n\nimport { STACKED_CARD_OFFSET_Y } from \"../../../constants/LAYOUTS\"\n\nclass StackedDeck extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    cards: PropTypes.array,\n    dragDisabled: PropTypes.bool,\n    setRef: PropTypes.func\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    dragDisabled: false,\n    cards: []\n  }\n\n  isCardDraggable = (i) => {\n    const { dragDisabled, cards } = this.props\n    return !dragDisabled && Freecell.isCardInStackDraggable(cards, i)\n  }\n\n  renderCards = () => {\n    const { cards } = this.props\n    \n    return cards.length > 0 ? cards.map((card, i) => (\n      <Card id={card.id} key={card.id} x={0} y={STACKED_CARD_OFFSET_Y * i} draggable={this.isCardDraggable(i)} />\n    )) : (\n      <Rect width={100} height={150} cornerRadius={5} fill=\"transparent\" stroke=\"transparent\" strokeWidth={0} />\n    )\n  }\n\n  render = () => {\n    const { x, y, setRef } = this.props\n    \n    return (\n      <Group x={x} y={y} {...(setRef && { ref: setRef })}>\n        {this.renderCards()}\n      </Group>\n    )\n  }\n}\n\nexport default StackedDeck\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport StackedDeck from \"./StackedDeck\";\n\nclass DraggingDeck extends React.PureComponent {\n  static propTypes = {\n    cards: PropTypes.array,\n    x: PropTypes.number,\n    y: PropTypes.number\n  }\n\n  static defaultProps = {\n    cards: [],\n    x: 0,\n    y: 0\n  }\n\n  componentDidUpdate = (oldProps) => {\n    if (oldProps.cards.length === 0 && this.props.cards.length !== 0) {\n      this.draggingNode.startDrag()\n    }\n  }\n\n  setDraggingDeckRef = (node) => {\n    this.draggingNode = node\n  }\n\n  render = () => {\n    const { cards, x, y } = this.props\n\n    return cards.length !== 0 && (\n      <StackedDeck cards={cards} x={x} y={y} dragDisabled={true} setRef={this.setDraggingDeckRef} />\n    )\n  }\n}\n\nexport default DraggingDeck","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport StackedDeck from \"./decks/StackedDeck\"\n\nclass PuzzleBoard extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    deckOfCards: PropTypes.array,\n    dragDisabled: PropTypes.bool,\n    onDragStart: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    x: 179,\n    y: 234,\n    deckOfCards: [],\n    dragDisabled: false\n  }\n\n  renderStackedDecks = () => this.props.deckOfCards.map((cards, i) => (\n    <StackedDeck key={i} cards={cards} x={(100 + 16) * i} y={0} dragDisabled={this.props.dragDisabled} />\n  ))\n\n  render = () => {\n    const { x, y, onDragStart } = this.props\n\n    return (\n      <Group x={x} y={y} name=\"puzzle-board\" onDragStart={onDragStart}>\n        {this.renderStackedDecks()}\n      </Group>\n    )\n  }\n}\n\nexport default PuzzleBoard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Stage, Layer } from 'react-konva/lib/ReactKonvaCore'\nimport Konva from \"konva\"\n\nimport ImageDataConsumer, { ImageDataProvider } from '../../contexts/ImageDataContext'\n\nimport FreeDeck from './decks/FreeDeck'\nimport SolvedDeck from './decks/SolvedDeck'\nimport DraggingDeck from './decks/DraggingDeck'\nimport PuzzleBoard from './PuzzleBoard'\nimport Freecell from '../../utils/freecell'\n\nimport { STACKED_CARD_OFFSET_Y, CARD_SHADOW_BLUR } from '../../constants/LAYOUTS'\n\nclass FreeCellCanvas extends React.PureComponent {\n  static propTypes = {\n    gameState: PropTypes.object.isRequired,\n    draggingStartPos: PropTypes.object,\n    draggingCards: PropTypes.array,\n    prevDraggingCardsPos: PropTypes.object,\n    moveCardsToDrag: PropTypes.func.isRequired,\n    moveFreeCardToDrag: PropTypes.func.isRequired,\n    moveDraggingCardsToPuzzle: PropTypes.func.isRequired,\n    moveDraggingCardsToFreeCell: PropTypes.func.isRequired,\n    moveDraggingCardsToSolvedDeck: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    draggingStartPos: { x: 0, y: 0 },\n    draggingCards: [],\n  }\n\n  state = {\n    dragDisabled: false,\n  }\n\n  getCanvasWidth = () => 1440 // [TODO] Support SSR and responsive simultaneously\n\n  getCanvasHeight = () => 821 // [TODO] Support SSR and responsive simultaneously\n\n  getDroppableFreeCells = () => {\n    const freeDeck = this.stageNode.findOne(\".free-deck\")\n    const allFreeCells = freeDeck.children\n    const freeCells = allFreeCells.filter(cell => {\n      const cellInside = cell.children\n      return !cellInside[cellInside.length - 1].name()\n    })\n\n    return freeCells\n  }\n\n  getDroppableSolvedTopCards = () => {\n    const solvedDeck = this.stageNode.findOne(\".solved-deck\")\n    const allSolvedCells = solvedDeck.children\n    const solvedTopCards = allSolvedCells.map(cell => {\n      const cellInside = cell.children\n      return cellInside[cellInside.length - 1]\n    })\n\n    return solvedTopCards\n  }\n\n  getDroppablePuzzleLeafCards = () => {\n    const puzzleBoard = this.stageNode.findOne(\".puzzle-board\")\n    const stackDecks = puzzleBoard.children\n    const leafCards = stackDecks.map(deck => {\n      const cards = deck.children\n      return cards.length !== 0 ? cards[cards.length - 1] : null\n    })\n\n    return leafCards\n  }\n\n  handlePuzzleDeckDragStart = e => {\n    const cardId = e.target.name()\n\n    const [deckIndex, cardIndex] = Freecell.getCardPosInPuzzleDeck(\n      this.props.gameState.puzzle,\n      cardId\n    )\n    const { x, y } = e.target.getClientRect()\n\n    this.props.moveCardsToDrag(deckIndex, cardIndex, { x, y })\n  }\n\n  handleFreeDeckDragStart = e => {\n    const cardId = e.target.name()\n    const { x, y } = e.target.getClientRect()\n\n    const freeCells = this.props.gameState.free\n    const freeIndex = Object.keys(freeCells).findIndex(\n      key => (freeCells[key] && freeCells[key].id) === cardId\n    )\n\n    this.props.moveFreeCardToDrag(freeIndex, { x, y })\n  }\n\n  handleDraggingLayerDragStart = e => {\n    e.cancelBubble = true\n\n    e.target.getChildren().each(child => {\n      child.setAttrs({\n        shadowBlur: 16,\n        shadowOpacity: 0.4,\n        shadowOffset: { x: 0, y: 4 },\n      })\n    })\n\n    e.target.setAttrs({\n      scaleX: 1.05,\n      scaleY: 1.05,\n    })\n  }\n\n  handleDraggingLayerDragEnd = e => {\n    this.setState(() => ({ dragDisabled: true }))\n    const draggingCards = e.target\n    const pointerClientX = e.evt.clientX\n    const pointerClientY = e.evt.clientY\n\n    const isPosInsideRect = (x, y, rectX, rectY, rectW, rectH) =>\n      rectX <= x && x <= rectX + rectW && rectY <= y && y <= rectY + rectH\n\n    let targetDropCell = null\n\n    /* check for free cells */\n    if (this.props.draggingCards.length === 1) {\n      const freeCells = this.getDroppableFreeCells()\n      targetDropCell = freeCells.find(cell => {\n        const rect = cell.getClientRect()\n        return isPosInsideRect(\n          pointerClientX,\n          pointerClientY,\n          rect.x,\n          rect.y,\n          rect.width,\n          rect.height\n        )\n      })\n\n      const targetDropFreeCellIndex = this.stageNode\n        .findOne(\".free-deck\").children\n        .findIndex(cell => cell === targetDropCell)\n\n      if (targetDropCell) {\n        const { x: targetPosX, y: targetPosY } = targetDropCell.getClientRect()\n        this.animateCardsToPos(\n          draggingCards,\n          targetPosX + 1,\n          targetPosY + 1,\n          () => {\n            this.setState(() => ({ dragDisabled: false }))\n            this.props.moveDraggingCardsToFreeCell(targetDropFreeCellIndex)\n          }\n        )\n\n        return\n      }\n    }\n\n    /* check for solved deck */\n    if (this.props.draggingCards.length === 1) {\n      const solvedTopCards = this.getDroppableSolvedTopCards()\n      targetDropCell = solvedTopCards.find(card => {\n        const rect = card.getClientRect()\n        return (\n          Freecell.isSolvable(card.name(), this.props.draggingCards[0].id) &&\n          isPosInsideRect(\n            pointerClientX,\n            pointerClientY,\n            rect.x,\n            rect.y,\n            rect.width,\n            rect.height\n          )\n        )\n      })\n\n      if (targetDropCell) {\n        const { x: targetPosX, y: targetPosY } = targetDropCell.getClientRect()\n        const [category, number] = Freecell.getCardCategoryAndNumber(targetDropCell.name())\n\n        this.animateCardsToPos(\n          draggingCards,\n          targetPosX + (number > 0 ? CARD_SHADOW_BLUR : 1),\n          targetPosY + (number > 0 ? CARD_SHADOW_BLUR : 1),\n          () => {\n            this.setState(() => ({ dragDisabled: false }))\n            this.props.moveDraggingCardsToSolvedDeck(category)\n          }\n        )\n\n        return\n      }\n    }\n\n    /* bounce back card to dragging start position */\n    const { deckIndex, cardIndex, freeIndex } = this.props.prevDraggingCardsPos\n\n    if (freeIndex >= 0) {\n      const targetDropCell = this.stageNode.findOne(`.freecell-${freeIndex}`)\n      const targetDropPos = targetDropCell.getClientRect()\n\n      this.animateCardsToPos(\n        e.target,\n        targetDropPos.x + 1,\n        targetDropPos.y + 1,\n        () => {\n          this.setState(() => ({ dragDisabled: false }))\n          this.props.moveDraggingCardsToFreeCell(freeIndex)\n        }\n      )\n    } else {\n      const endPosCardId = this.props.gameState.puzzle[deckIndex][cardIndex - 1]\n\n      const targetDropCard = this.stageNode.findOne(`.${endPosCardId.id}`)\n      const targetDropPos = targetDropCard.getClientRect()\n\n      this.animateCardsToPos(\n        e.target,\n        targetDropPos.x + CARD_SHADOW_BLUR,\n        targetDropPos.y + STACKED_CARD_OFFSET_Y + CARD_SHADOW_BLUR,\n        () => {\n          this.setState(() => ({ dragDisabled: false }))\n          this.props.moveDraggingCardsToPuzzle()\n        }\n      )\n    }\n  }\n\n  animateCardsToPos(cards, x, y, callback) {\n    cards.to({\n      x: x,\n      y: y,\n      duration: 0.15,\n      easing: Konva.Easings.EaseOut,\n      onFinish: () => {\n        cards.getChildren().each(child => {\n          child.to({\n            duration: 0.45,\n            easing: Konva.Easings.ElasticEaseOut,\n            shadowOffsetX: 0,\n            shadowOffsetY: 2,\n            shadowBlur: CARD_SHADOW_BLUR,\n            shadowOpacity: 0.3,\n          })\n        })\n\n        cards.to({\n          duration: 0.45,\n          easing: Konva.Easings.ElasticEaseOut,\n          scaleX: 1,\n          scaleY: 1,\n          onFinish: callback,\n        })\n      },\n    })\n  }\n\n  setStageRef = node => (this.stageNode = node)\n\n  render = () => {\n    const { gameState, draggingCards, draggingStartPos } = this.props\n    const { dragDisabled } = this.state\n\n    return (\n      <ImageDataConsumer>\n        {imageData => (\n          <Stage\n            width={this.getCanvasWidth()}\n            height={this.getCanvasHeight()}\n            ref={this.setStageRef}\n          >\n            <ImageDataProvider imageData={imageData}>\n              {/* Puzzle Layer */}\n              <Layer>\n                <FreeDeck\n                  pos0Card={gameState.free.pos0Card}\n                  pos1Card={gameState.free.pos1Card}\n                  pos2Card={gameState.free.pos2Card}\n                  pos3Card={gameState.free.pos3Card}\n                  onDragStart={this.handleFreeDeckDragStart}\n                />\n                <SolvedDeck\n                  spadeSolvedCards={gameState.solved.spadeSolvedCards}\n                  heartSolvedCards={gameState.solved.heartSolvedCards}\n                  diamondSolvedCards={gameState.solved.diamondSolvedCards}\n                  clubSolvedCards={gameState.solved.clubSolvedCards}\n                />\n\n                <PuzzleBoard\n                  deckOfCards={gameState.puzzle}\n                  dragDisabled={dragDisabled}\n                  onDragStart={this.handlePuzzleDeckDragStart}\n                />\n              </Layer>\n\n              {/* Dragging Cards Layer */}\n              <Layer\n                onDragStart={this.handleDraggingLayerDragStart}\n                onDragEnd={this.handleDraggingLayerDragEnd}\n              >\n                <DraggingDeck\n                  cards={draggingCards}\n                  x={draggingStartPos.x}\n                  y={draggingStartPos.y}\n                />\n              </Layer>\n            </ImageDataProvider>\n          </Stage>\n        )}\n      </ImageDataConsumer>\n    )\n  }\n}\n\nexport default FreeCellCanvas\n","import React from \"react\"\nimport FreeCellCanvas from \"./FreeCellCanvas\"\n\nclass FreeCellBoard extends React.PureComponent {\n  state = {\n    gameState: {\n      puzzle: [\n        [{ id: 'heart_k' }, { id: 'club_2' }, { id: 'diamond_10' }, { id: 'heart_3' }, { id: 'heart_6' }, { id: 'spade_a' }, { id: 'spade_10' }],\n        [{ id: 'diamond_2' }, { id: 'spade_7' }, { id: 'diamond_6' }, { id: 'spade_5' }, { id: 'club_10' }, { id: 'diamond_k' }, { id: 'heart_8' }],\n        [{ id: 'spade_9' }, { id: 'heart_4' }, { id: 'club_q' }, { id: 'spade_4' }, { id: 'club_7' }, { id: 'spade_2' }, { id: 'club_9' }],\n        [{ id: 'heart_a' }, { id: 'spade_8' }, { id: 'diamond_4' }, { id: 'heart_j' }, { id: 'heart_q' }, { id: 'diamond_9' }, { id: 'spade_q' }],\n        [{ id: 'club_8' }, { id: 'diamond_q' }, { id: 'heart_9' }, { id: 'club_k' }, { id: 'spade_k' }, { id: 'diamond_a' }],\n        [{ id: 'heart_10' }, { id: 'club_a' }, { id: 'diamond_7' }, { id: 'heart_2' }, { id: 'club_j' }, { id: 'spade_6' }],\n        [{ id: 'club_6' }, { id: 'diamond_3' }, { id: 'heart_5' }, { id: 'diamond_j' }, { id: 'diamond_5' }, { id: 'heart_7' }],\n        [{ id: 'spade_3' }, { id: 'diamond_8' }, { id: 'club_5' }, { id: 'club_3' }, { id: 'spade_j' }, { id: 'club_4' }],\n      ],\n      free: {\n        pos0Card: null, pos1Card: null, pos2Card: null, pos3Card: null\n      },\n      solved: {\n        spadeSolvedCards: [],\n        heartSolvedCards: [],\n        diamondSolvedCards: [],\n        clubSolvedCards: []\n      }\n    },\n    history: [],\n    draggingStartPos: { x: 0, y: 0 },\n    draggingCards: [],\n    prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 }\n  }\n\n  moveCardsToDrag = (deckIndex, cardIndex, startPos) => {\n    const { gameState } = this.state\n\n    const updatedDeckCards = gameState.puzzle[deckIndex].slice(0, cardIndex)\n    const toDraggingCards = gameState.puzzle[deckIndex].slice(cardIndex)\n\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        puzzle: [\n          ...state.gameState.puzzle.slice(0, deckIndex),\n          updatedDeckCards,\n          ...state.gameState.puzzle.slice(deckIndex + 1)\n        ]\n      },\n      draggingCards: toDraggingCards,\n      draggingStartPos: startPos,\n      prevDraggingCardsPos: { ...state.prevDraggingCardsPos, deckIndex, cardIndex }\n    }))\n  }\n\n  moveFreeCardToDrag = (freeIndex, startPos) => {\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        free: {\n          ...state.gameState.free,\n          [`pos${freeIndex}Card`]: null,\n        },\n      },\n      draggingCards: [ state.gameState.free[`pos${freeIndex}Card`] ],\n      draggingStartPos: startPos,\n      prevDraggingCardsPos: { ...state.prevDraggingCardsPos, freeIndex },\n    }))\n  }\n\n  moveDraggingCardsToPuzzle = (deckIndex) => {\n    const { gameState, draggingCards, prevDraggingCardsPos } = this.state\n    const targetDeckIndex = deckIndex || prevDraggingCardsPos.deckIndex\n\n    const updatedDeckCards = gameState.puzzle[targetDeckIndex].concat(draggingCards)\n\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        puzzle: [\n          ...state.gameState.puzzle.slice(0, targetDeckIndex),\n          updatedDeckCards,\n          ...state.gameState.puzzle.slice(targetDeckIndex + 1)\n        ]\n      }\n    }))\n\n    setTimeout(() => this.setState(() => ({\n      draggingCards: [],\n      draggingStartPos: { x: 0, y: 0 },\n      prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 }\n    })), 0)\n  }\n\n  moveDraggingCardsToFreeCell = (i) => {\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        free: {\n          ...state.gameState.free,\n          [`pos${i}Card`]: state.draggingCards[0]\n        },\n      },\n    }))\n\n    setTimeout(() => this.setState(() => ({\n      draggingCards: [],\n      draggingStartPos: { x: 0, y: 0 },\n      prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 },\n    })), 0)\n  }\n\n  moveDraggingCardsToSolvedDeck = (category) => {\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        solved: {\n          ...state.gameState.solved,\n          [`${category}SolvedCards`]: state.gameState.solved[\n            `${category}SolvedCards`\n          ].concat(state.draggingCards),\n        },\n      },\n    }))\n\n    setTimeout(() => this.setState(() => ({\n      draggingCards: [],\n      draggingStartPos: { x: 0, y: 0 },\n      prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 },\n    })), 0)\n  }\n\n  render = () => {\n    const { gameState, draggingStartPos, draggingCards, prevDraggingCardsPos } = this.state\n    \n    return (\n      <FreeCellCanvas\n        gameState={gameState}\n        draggingStartPos={draggingStartPos}\n        draggingCards={draggingCards}\n        prevDraggingCardsPos={prevDraggingCardsPos}\n        moveCardsToDrag={this.moveCardsToDrag}\n        moveFreeCardToDrag={this.moveFreeCardToDrag}\n        moveDraggingCardsToPuzzle={this.moveDraggingCardsToPuzzle}\n        moveDraggingCardsToFreeCell={this.moveDraggingCardsToFreeCell}\n        moveDraggingCardsToSolvedDeck={this.moveDraggingCardsToSolvedDeck}\n      />\n    )\n  }\n}\n\nexport default FreeCellBoard\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { ImageDataProvider } from '../contexts/ImageDataContext'\n\nimport SEO from \"../layouts/SEO\"\nimport GlobalStyles from \"../layouts/GlobalStyles\"\nimport FreeCellBoard from \"../components/FreeCellBoard\"\n\nexport default ({ data }) => (\n  <ImageDataProvider imageData={data}>\n    <SEO title=\"Retro Free Cell\" />\n    <GlobalStyles />\n\n    <FreeCellBoard />\n  </ImageDataProvider>\n)\n\nexport const query = graphql`\n  query {\n    club_a: file(relativePath: { eq: \"cards/club_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_2: file(relativePath: { eq: \"cards/club_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_3: file(relativePath: { eq: \"cards/club_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_4: file(relativePath: { eq: \"cards/club_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_5: file(relativePath: { eq: \"cards/club_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_6: file(relativePath: { eq: \"cards/club_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_7: file(relativePath: { eq: \"cards/club_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_8: file(relativePath: { eq: \"cards/club_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_9: file(relativePath: { eq: \"cards/club_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_10: file(relativePath: { eq: \"cards/club_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_j: file(relativePath: { eq: \"cards/club_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_q: file(relativePath: { eq: \"cards/club_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_k: file(relativePath: { eq: \"cards/club_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_a: file(relativePath: { eq: \"cards/diamond_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_2: file(relativePath: { eq: \"cards/diamond_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_3: file(relativePath: { eq: \"cards/diamond_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_4: file(relativePath: { eq: \"cards/diamond_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_5: file(relativePath: { eq: \"cards/diamond_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_6: file(relativePath: { eq: \"cards/diamond_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_7: file(relativePath: { eq: \"cards/diamond_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_8: file(relativePath: { eq: \"cards/diamond_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_9: file(relativePath: { eq: \"cards/diamond_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_10: file(relativePath: { eq: \"cards/diamond_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_j: file(relativePath: { eq: \"cards/diamond_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_q: file(relativePath: { eq: \"cards/diamond_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_k: file(relativePath: { eq: \"cards/diamond_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_a: file(relativePath: { eq: \"cards/heart_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_2: file(relativePath: { eq: \"cards/heart_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_3: file(relativePath: { eq: \"cards/heart_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_4: file(relativePath: { eq: \"cards/heart_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_5: file(relativePath: { eq: \"cards/heart_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_6: file(relativePath: { eq: \"cards/heart_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_7: file(relativePath: { eq: \"cards/heart_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_8: file(relativePath: { eq: \"cards/heart_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_9: file(relativePath: { eq: \"cards/heart_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_10: file(relativePath: { eq: \"cards/heart_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_j: file(relativePath: { eq: \"cards/heart_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_q: file(relativePath: { eq: \"cards/heart_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_k: file(relativePath: { eq: \"cards/heart_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_a: file(relativePath: { eq: \"cards/spade_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_2: file(relativePath: { eq: \"cards/spade_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_3: file(relativePath: { eq: \"cards/spade_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_4: file(relativePath: { eq: \"cards/spade_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_5: file(relativePath: { eq: \"cards/spade_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_6: file(relativePath: { eq: \"cards/spade_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_7: file(relativePath: { eq: \"cards/spade_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_8: file(relativePath: { eq: \"cards/spade_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_9: file(relativePath: { eq: \"cards/spade_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_10: file(relativePath: { eq: \"cards/spade_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_j: file(relativePath: { eq: \"cards/spade_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_q: file(relativePath: { eq: \"cards/spade_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_k: file(relativePath: { eq: \"cards/spade_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_watermark: file(relativePath: { eq: \"img_watermark_club.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_watermark: file(relativePath: { eq: \"img_watermark_diamond.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n    heart_watermark: file(relativePath: { eq: \"img_watermark_heart.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n    spade_watermark: file(relativePath: { eq: \"img_watermark_spade.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n  }\n`\n"],"sourceRoot":""}