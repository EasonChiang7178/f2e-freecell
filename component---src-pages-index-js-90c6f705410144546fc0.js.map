{"version":3,"sources":["webpack:///./src/contexts/ImageDataContext.js","webpack:///./src/layouts/SEO.js","webpack:///./src/constants/COLORS.js","webpack:///./src/layouts/GlobalStyles.js","webpack:///./src/components/FreeCellBoard.css.js","webpack:///./src/components/FreeCellCanvas/cells/EmptyCell.js","webpack:///./src/components/FreeCellCanvas/Image.js","webpack:///./src/constants/LAYOUTS.js","webpack:///./src/components/FreeCellCanvas/cells/Card.js","webpack:///./src/components/FreeCellCanvas/decks/FreeDeck.js","webpack:///./src/components/FreeCellCanvas/cells/EmptyWaterMarkCell.js","webpack:///./src/components/FreeCellCanvas/decks/SolvedDeck.js","webpack:///./src/utils/freecell.js","webpack:///./src/components/FreeCellCanvas/decks/StackedDeck.js","webpack:///./src/components/FreeCellCanvas/decks/DraggingDeck.js","webpack:///./src/components/FreeCellCanvas/PuzzleBoard.js","webpack:///./src/components/FreeCellCanvas/index.js","webpack:///./src/components/GameControls.css.js","webpack:///./src/components/GameControls.js","webpack:///./src/components/LoadingOverlay.css.js","webpack:///./src/components/LoadingOverlay.js","webpack:///./src/components/FreeCellBoard.js","webpack:///./src/pages/index.js","webpack:///./src/hooks/useCardImageData.js","webpack:///./src/hooks/useBoardData.js"],"names":["React","createContext","Provider","Consumer","ImageDataProvider","render","react_default","a","createElement","value","_this","props","imageData","children","PureComponent","SEO","_ref","description","lang","meta","title","site","_2417117884","data","metaDescription","siteMetadata","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","COLORS","GREY","RED","YELLOW","BLACK","BLUE","Global","createGlobalStyle","_templateObject","GlobalStyles","Fragment","dist","Container","styled","div","FreeCellBoard_css_templateObject","EmptyCell","ReactKonvaCore","x","y","width","height","cornerRadius","fill","stroke","strokeWidth","opacity","CanvasImage","_React$PureComponent","call","this","handleLoad","setState","image","removeEventListener","imageCache","set","handleMoveOver","document","body","style","cursor","handleMoveOut","_this$props","draggable","Object","assign","state","ref","node","imageNode","onMouseOver","onMouseOut","onDragStart","onDragEnd","get","loadPlaceholder","componentDidMount","has","loadImage","componentDidUpdate","oldProps","_this2","src","srcSet","base64","placeholder","window","Image","addEventListener","LRU","max","length","_","key","maxAge","STACKED_CARD_OFFSET_Y","CARD_SHADOW_BLUR","Card","id","_this$props$imageData","childImageSharp","fixed","FreeCellCanvas_Image","shadowColor","shadowOpacity","shadowBlur","shadowOffsetY","cells_Card","Card_Card","FreeDeck","renderCell","i","cardId","cells_EmptyCell","EmptyWaterMarkCell","_this$props$waterMark","waterMarkData","category","cells_EmptyWaterMarkCell","EmptyWaterMarkCell_EmptyWaterMarkCell","SolvedDeck","renderSolvedSpadeDeck","renderDeck","renderSolvedHeartDeck","renderSolvedDiamondDeck","renderSolvedClubDeck","solvedCards","topCardId","spadeSolvedCards","heartSolvedCards","diamondSolvedCards","clubSolvedCards","Freecell","isSolvable","droppedCardId","_this$getCardCategory","getCardCategoryAndNumber","topCardCategory","topCardNumber","_this$getCardCategory2","droppedCategory","droppedCardNumber","isStackable","leafCardId","emptyDeckNum","emptyFreeCellNum","droppedCardsNum","_this$getCardColorAnd","getCardColorAndNumber","leafCardColor","leafCardNumber","_this$getCardColorAnd2","droppedCardColor","isCardInStackDraggable","cards","cardInIndex","slice","every","self","_this$getCardColorAnd3","cardColor","cardNumber","_this$getCardColorAnd4","nextCardColor","nextCardNumber","getCardPosInPuzzleDeck","cardIdsOfDecks","j","Error","_cardId$split","split","number","getCardNumber","_cardId$split2","getCardColor","numString","parseInt","StackedDeck","isCardDraggable","dragDisabled","renderCards","map","_this$props2","setRef","DraggingDeck","draggingNode","startDrag","setDraggingDeckRef","decks_StackedDeck","PuzzleBoard","renderStackedDecks","deckOfCards","FreeCellCanvas","doubleClickDisabled","stageNode","on","handleStageNodeDoubleClick","getCanvasWidth","getCanvasHeight","getDroppableFreeCells","findOne","filter","cell","cellInside","getDroppableSolvedTopCards","getDroppablePuzzleLeafCards","deck","handlePuzzleDeckDragStart","e","target","_Freecell$getCardPosI","gameState","puzzle","deckIndex","cardIndex","_e$target$getClientRe","getClientRect","moveCardsToDrag","handleFreeDeckDragStart","_e$target$getClientRe2","freeCells","free","freeIndex","keys","findIndex","moveFreeCardToDrag","handleDraggingLayerDragStart","cancelBubble","getChildren","each","child","setAttrs","shadowOffset","scaleX","scaleY","handleDraggingLayerDragEnd","draggingCards","pointerClientX","evt","clientX","pointerClientY","clientY","checkFreeCellsAndDropCard","checkSolvedDecksAndDropCard","checkPuzzleDecksAndDropCards","bounceBackDraggingCards","clickedCard","clickedCardId","some","leafCard","targetDropCell","find","card","_targetDropCell$getCl","droppedX","droppedY","_clickedCard$getClien","cardX","cardY","targetPosX","targetPosY","_Freecell$getCardPosI2","_e$target$getClientRe3","setTimeout","_Freecell$getCardCate","animateCardsToPos","moveDraggingCardsToSolvedDeck","rect","isPosInsideRect","targetDropFreeCellIndex","_targetDropCell$getCl2","moveDraggingCardsToFreeCell","_targetDropCell$getCl3","_Freecell$getCardCate2","puzzleLeafCards","emptyDecksNum","reduce","totalNum","targetDropPuzzleDeckIndex","_targetDropCell$getCl4","dropPosOffsetX","dropPosOffsetY","moveDraggingCardsToPuzzle","rectX","rectY","rectW","rectH","_this$props$prevDragg","prevDraggingCardsPos","targetDropPos","endPosCardId","setStageRef","draggingStartPos","ImageDataContext_ImageDataProvider","decks_FreeDeck","pos0Card","pos1Card","pos2Card","pos3Card","decks_SolvedDeck","solved","FreeCellCanvas_PuzzleBoard","decks_DraggingDeck","callback","callbackCalled","to","duration","easing","Konva","Easings","EaseOut","onFinish","ElasticEaseOut","shadowOffsetX","Wrapper","GameControls_css_templateObject","Button","button","_templateObject2","GameControls","onNewGameClick","onGameRestartClick","onClick","LoadingOverlay_css_templateObject","isHided","visibility","transition","Title","h1","LoadingOverlay_css_templateObject2","LoadingOverlay","isStopped","onCompleted","lottieOption","loop","autoplay","animationData","loadingAnimation","lottieEvents","eventName","LoadingOverlay_css_Wrapper","react_lottie_dist_default","options","eventListeners","FreeCellBoard","handleNewGameClick","newBoardIndex","curBoardIndex","getRandomBoardDataIndex","isLoadingStopped","boardData","handleGameRestartClick","handleLoadingCompleted","startPos","updatedDeckCards","toDraggingCards","_toConsumableArray","_Object$assign","_this$state","targetDeckIndex","_Object$assign2","_Object$assign3","Math","floor","random","_this$state2","components_FreeCellCanvas","components_GameControls","components_LoadingOverlay","boardIndex","history","__webpack_exports__","_1736879749","_1769471330","allDataJson","edges","edge","board","layouts_SEO","layouts_GlobalStyles","components_FreeCellBoard"],"mappings":"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","file":"component---src-pages-index-js-90c6f705410144546fc0.js","sourcesContent":["import React from \"react\"\n\nconst defaultContextValue = {}\n\nconst { Provider, Consumer } = React.createContext(defaultContextValue)\n\nclass ImageDataProvider extends React.PureComponent {\n  render = () => (\n    <Provider value={this.props.imageData}>\n      {this.props.children}\n    </Provider>\n  )\n}\n\nexport { Consumer as default, ImageDataProvider }\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh-TW`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","const COLORS = {\n  GREY: \"#dbd3ca\",\n  RED: \"#a93d2d\",\n  YELLOW: \"#c99d31\",\n  BLACK: \"#4d4d4d\",\n  BLUE: \"#6ca39f\",\n}\n\nexport default COLORS\n","import React from \"react\"\nimport { Normalize } from 'styled-normalize'\nimport { createGlobalStyle } from 'styled-components'\n\nimport COLORS from \"../constants/COLORS\"\n\nconst Global = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=DM+Serif+Text&display=swap');\n  body {\n    font-family: 'DM Serif Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Open Sans', 'Helvetica Neue', sans-serif;\n    background-color: ${COLORS.GREY};\n  }\n`\n\nclass GlobalStyles extends React.PureComponent {\n  render = () => (\n    <>\n      <Normalize />\n      <Global />\n    </>\n  )\n}\n\nexport default GlobalStyles\n","import styled from \"styled-components\"\n\nexport const Container = styled.div`\n  position: relative;\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Rect } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Rect\"\n\nimport COLORS from \"../../../constants/COLORS\"\n\n\nclass EmptyCell extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0\n  }\n\n  render = () => (\n    <Rect\n      x={this.props.x}\n      y={this.props.y}\n      width={100}\n      height={150}\n      cornerRadius={5}\n      fill=\"transparent\"\n      stroke={COLORS.BLACK}\n      strokeWidth={1}\n      opacity={0.2}\n    />\n  )\n}\n\nexport default EmptyCell\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport LRU from \"lru-cache\"\n\nimport { Image } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Image\"\n\nconst LRUOptions = {\n  max: 500,\n  length: (_, key) => key.length,\n  maxAge: 1000 * 60 * 60 * 3,\n}\n\nclass CanvasImage extends React.PureComponent {\n  static propTypes = {\n    name: PropTypes.string,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    base64: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    src: PropTypes.string,\n    srcSet: PropTypes.string,\n    style: PropTypes.object,\n    draggable: PropTypes.bool.isRequired\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    draggable: false\n  }\n\n  static imageCache = new LRU(LRUOptions)\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      image: CanvasImage.imageCache.get(props.name) || this.loadPlaceholder()\n    }\n  }\n\n  componentDidMount() {\n    if (CanvasImage.imageCache.has(this.props.name) === false) {\n      this.loadImage()\n    }\n  }\n\n  componentDidUpdate(oldProps) {\n    if (\n      CanvasImage.imageCache.has(this.props.name) === false &&\n      oldProps.src !== this.props.src &&\n      oldProps.srcSet !== this.props.srcSet\n    ) {\n      this.loadImage()\n\n      if (this.props.base64) {\n        this.setState(() => ({\n          placeholder: this.loadPlaceholder()\n        }))\n      }\n    }\n  }\n\n  loadPlaceholder() {\n    if (!this.props.base64) {\n      return null\n    }\n\n    const placeholder = new window.Image()\n    placeholder.src = this.props.base64\n    return placeholder\n  }\n\n  loadImage() {\n    this.image = new window.Image()\n    this.image.src = this.props.src\n    this.image.srcSet = this.props.srcSet // [NOTE] not working, maybe canvas image not support srcSet?\n    this.image.addEventListener('load', this.handleLoad)\n  }\n\n  handleLoad = () => {\n    this.setState({\n      image: this.image\n    })\n    this.image.removeEventListener('load', this.handleLoad)\n\n    CanvasImage.imageCache.set(this.props.name, this.image)\n  }\n\n  handleMoveOver = () => {\n    document.body.style.cursor = 'pointer'\n  }\n\n  handleMoveOut = () => {\n    document.body.style.cursor = 'default'\n  }\n\n  render = () => {\n    const { name, x, y, width, height, draggable, style } = this.props\n\n    return (\n      <Image\n        name={name}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        image={this.state.image}\n        draggable={draggable}\n        ref={node => {\n          this.imageNode = node\n        }}\n        {...(draggable && {\n          onMouseOver: this.handleMoveOver,\n          onMouseOut: this.handleMoveOut,\n          onDragStart: () => {}, // [NOTE] handle the drag events by event delegation in State component\n          onDragEnd: () => {}\n        })}\n        {...style}\n      />\n    )\n  }\n}\n\nexport default CanvasImage\n","export const STACKED_CARD_OFFSET_Y = 32\nexport const CARD_SHADOW_BLUR = 6\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport ImageDataConsumer from \"../../../contexts/ImageDataContext\"\nimport Image from \"../Image\"\nimport { CARD_SHADOW_BLUR } from \"../../../constants/LAYOUTS\"\n\nclass Card extends React.PureComponent {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    draggable: PropTypes.bool\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    draggable: false\n  }\n\n  render = () => {\n    const { id, x, y, draggable } = this.props\n    const { base64, width, height, src, srcSet } = this.props.imageData.childImageSharp.fixed\n    \n    return (\n      <Image\n        x={x}\n        y={y}\n        name={id}\n        base64={base64}\n        width={width / 2} // [NOTE] hotfix, for retina resolution support\n        height={height / 2}\n        src={src}\n        srcSet={srcSet}\n        draggable={draggable}\n        style={{\n          shadowColor: \"black\",\n          shadowOpacity: .3,\n          shadowBlur: CARD_SHADOW_BLUR,\n          shadowOffsetY: 2\n        }}\n      />\n    )\n  }\n}\n\nexport default (props) => (\n  <ImageDataConsumer>\n    {(imageData) => <Card imageData={imageData[props.id]} {...props} />}\n  </ImageDataConsumer>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport EmptyCell from \"../cells/EmptyCell\"\nimport Card from \"../cells/Card\"\n\nclass FreeDeck extends React.PureComponent {\n  static propTypes = {\n    pos0Card: PropTypes.string,\n    pos1Card: PropTypes.string,\n    pos2Card: PropTypes.string,\n    pos3Card: PropTypes.string,\n    onDragStart: PropTypes.func.isRequired\n  }\n\n  renderCell = (i) => {\n    const cardId = this.props[`pos${i}Card`]\n    \n    return (\n      <Group x={(100 + 16) * i} y={0} name={`freecell-${i}`}>\n        <EmptyCell />\n        {cardId && <Card key={cardId} id={cardId} draggable={true} />}\n      </Group>\n    )\n  }\n\n  render = () => {\n    return (\n      <Group x={139} y={51} name=\"free-deck\" onDragStart={this.props.onDragStart}>\n        {this.renderCell(0)}\n        {this.renderCell(1)}\n        {this.renderCell(2)}\n        {this.renderCell(3)}\n      </Group>\n    )\n  }\n}\n\nexport default FreeDeck","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport ImageDataConsumer from \"../../../contexts/ImageDataContext\"\n\nimport EmptyCell from './EmptyCell'\nimport Image from '../Image'\n\nclass EmptyWaterMarkCell extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    category: PropTypes.string.isRequired,\n    waterMarkData: PropTypes.object\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0\n  }\n\n  render = () => {\n    const { base64, width, height, src, srcSet } = this.props.waterMarkData.childImageSharp.fixed\n\n    return (\n      <Group x={this.props.x} y={this.props.y} name={`${this.props.category}_0`}>\n        <EmptyCell />\n        <Image\n          name={this.props.category}\n          x={20}\n          y={45}\n          base64={base64}\n          width={width / 2} // [NOTE] hotfix, for retina resolution support\n          height={height / 2}\n          src={src}\n          srcSet={srcSet}\n        />\n      </Group>\n    )\n  }\n}\n\n\nexport default (props) => (\n  <ImageDataConsumer>\n    {(imageData) => <EmptyWaterMarkCell waterMarkData={imageData[`${props.category}_watermark`]} {...props} />}\n  </ImageDataConsumer>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport EmptyWaterMarkCell from \"../cells/EmptyWaterMarkCell\"\nimport Card from \"../cells/Card\"\n\nclass SolvedDeck extends React.PureComponent {\n  static propTypes = {\n    spadeSolvedCards: PropTypes.array,\n    heartSolvedCards: PropTypes.array,\n    diamondSolvedCards: PropTypes.array,\n    clubSolvedCards: PropTypes.array\n  }\n\n  static defaultProps = {\n    spadeSolvedCards: [],\n    heartSolvedCards: [],\n    diamondSolvedCards: [],\n    clubSolvedCards: []\n  }\n\n  renderSolvedSpadeDeck = () => this.renderDeck(0, \"spade\")\n  renderSolvedHeartDeck = () => this.renderDeck(1, \"heart\")\n  renderSolvedDiamondDeck = () => this.renderDeck(2, \"diamond\")\n  renderSolvedClubDeck = () => this.renderDeck(3, \"club\")\n\n  renderDeck = (i, category) => {\n    const solvedCards = this.props[`${category}SolvedCards`]\n    const topCardId = solvedCards.length > 0 ? solvedCards[solvedCards.length - 1] : null\n    \n    return (\n      <Group x={(100 + 16) * i} y={0}>\n        <EmptyWaterMarkCell category={category} />\n        {topCardId && <Card key={topCardId} id={topCardId} />}\n      </Group>\n    )\n  }\n\n  render = () => {\n    return (\n      <Group x={687} y={51} name=\"solved-deck\">\n        {this.renderSolvedSpadeDeck()}\n        {this.renderSolvedHeartDeck()}\n        {this.renderSolvedDiamondDeck()}\n        {this.renderSolvedClubDeck()}\n      </Group>\n    )\n  }\n}\n\nexport default SolvedDeck\n","class Freecell {\n  static isSolvable(topCardId, droppedCardId) {\n    const [topCardCategory, topCardNumber] = this.getCardCategoryAndNumber(topCardId)\n    const [droppedCategory, droppedCardNumber] = this.getCardCategoryAndNumber(droppedCardId)\n\n    if (\n      topCardCategory !== droppedCategory ||\n      (topCardNumber + 1) !== droppedCardNumber\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  static isStackable(leafCardId, emptyDeckNum, emptyFreeCellNum, droppedCardId, droppedCardsNum) {\n    const afterEmptyDeckNum = leafCardId === \"empty-cell\" ? emptyDeckNum - 1 : emptyDeckNum\n    const enabledDraggingCardNum = 1 + emptyFreeCellNum + afterEmptyDeckNum * 2\n    if (droppedCardsNum > enabledDraggingCardNum) {\n      return false\n    }\n\n    if (leafCardId === \"empty-cell\") {\n      return true\n    }\n\n    const [leafCardColor, leafCardNumber] = this.getCardColorAndNumber(leafCardId)\n    const [droppedCardColor, droppedCardNumber] = this.getCardColorAndNumber(droppedCardId)\n\n    return (\n      (leafCardColor !== droppedCardColor) &&\n      (leafCardNumber === droppedCardNumber + 1)\n    )\n  }\n\n  static isCardInStackDraggable(cards, cardInIndex) {\n    if (cards.length === 0) {\n      return false\n    }\n\n    const stackLength = cards.length\n    if (stackLength === cardInIndex + 1) {\n      return true\n    } \n    \n    return cards.slice(cardInIndex).every((cardId, i, self) => {\n      if (self.length === i + 1) {\n        return true\n      }\n\n      const [cardColor, cardNumber] = this.getCardColorAndNumber(cardId)\n      const [nextCardColor, nextCardNumber] = this.getCardColorAndNumber(self[i + 1])\n\n      return (\n        (cardColor !== nextCardColor) &&\n        (cardNumber === nextCardNumber + 1)\n      )\n    })\n  }\n\n  static getCardPosInPuzzleDeck(cardIdsOfDecks, cardId) {\n    for (let i = 0; i < cardIdsOfDecks.length; i++) {\n      for (let j = 0; j < cardIdsOfDecks[i].length; j++) {\n        if (cardIdsOfDecks[i][j] === cardId) {\n          return [i, j]\n        }\n      }\n    }\n\n    throw Error(\"Card not find in puzzle!\")\n  }\n\n  static getCardCategoryAndNumber(cardId) {\n    const [ category, number ] = cardId.split(\"_\")\n    return [ category, this.getCardNumber(number) ]\n  }\n\n  static getCardColorAndNumber(cardId) {\n    const [category, number] = cardId.split(\"_\")\n    return [this.getCardColor(category), this.getCardNumber(number)]\n  }\n\n  static getCardNumber(numString) {\n    switch(numString) {\n      case \"k\":\n        return 13\n      case \"q\":\n        return 12\n      case \"j\":\n        return 11\n      case \"a\":\n        return 1\n      default:\n        return parseInt(numString)\n    }\n  }\n\n  static getCardColor(category) {\n    switch(category) {\n      case \"club\":\n      case \"spade\":\n        return \"black\"\n      case \"heart\":\n      case \"diamond\":\n        return \"red\"\n      default:\n        throw Error(\"Unknown card category!\")\n    }\n  }\n}\n\nexport default Freecell\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group, Rect } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Rect\"\n\nimport Card from \"../cells/Card\"\nimport Freecell from \"../../../utils/freecell\"\n\nimport { STACKED_CARD_OFFSET_Y } from \"../../../constants/LAYOUTS\"\n\nclass StackedDeck extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    cards: PropTypes.array,\n    dragDisabled: PropTypes.bool,\n    setRef: PropTypes.func\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    dragDisabled: false,\n    cards: []\n  }\n\n  isCardDraggable = (i) => {\n    const { dragDisabled, cards } = this.props\n    return !dragDisabled && Freecell.isCardInStackDraggable(cards, i)\n  }\n\n  renderCards = () => {\n    const { cards } = this.props\n    \n    return cards.length > 0 ? cards.map((cardId, i) => (\n      <Card id={cardId} key={cardId} x={0} y={STACKED_CARD_OFFSET_Y * i} draggable={this.isCardDraggable(i)} />\n    )) : (\n      <Rect name=\"empty-cell\" width={100} height={150} cornerRadius={5} fill=\"transparent\" stroke=\"transparent\" strokeWidth={0} />\n    )\n  }\n\n  render = () => {\n    const { x, y, setRef } = this.props\n    \n    return (\n      <Group x={x} y={y} {...(setRef && { ref: setRef })}>\n        {this.renderCards()}\n      </Group>\n    )\n  }\n}\n\nexport default StackedDeck\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport StackedDeck from \"./StackedDeck\";\n\nclass DraggingDeck extends React.PureComponent {\n  static propTypes = {\n    cards: PropTypes.array,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    dragDisabled: PropTypes.bool\n  }\n\n  static defaultProps = {\n    cards: [],\n    x: 0,\n    y: 0,\n    dragDisabled: false\n  }\n\n  componentDidUpdate = (oldProps) => {\n    if (oldProps.cards.length === 0 && this.props.cards.length !== 0 && this.props.dragDisabled === false) {\n      this.draggingNode.startDrag()\n    }\n  }\n\n  setDraggingDeckRef = (node) => {\n    this.draggingNode = node\n  }\n\n  render = () => {\n    const { cards, x, y } = this.props\n\n    return cards.length !== 0 && (\n      <StackedDeck cards={cards} x={x} y={y} dragDisabled={true} setRef={this.setDraggingDeckRef} />\n    )\n  }\n}\n\nexport default DraggingDeck","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport StackedDeck from \"./decks/StackedDeck\"\n\nclass PuzzleBoard extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    deckOfCards: PropTypes.array,\n    dragDisabled: PropTypes.bool,\n    onDragStart: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    x: 179,\n    y: 234,\n    deckOfCards: [],\n    dragDisabled: false\n  }\n\n  renderStackedDecks = () => this.props.deckOfCards.map((cards, i) => (\n    <StackedDeck key={i} cards={cards} x={(100 + 16) * i} y={0} dragDisabled={this.props.dragDisabled} />\n  ))\n\n  render = () => {\n    const { x, y, onDragStart } = this.props\n\n    return (\n      <Group x={x} y={y} name=\"puzzle-board\" onDragStart={onDragStart}>\n        {this.renderStackedDecks()}\n      </Group>\n    )\n  }\n}\n\nexport default PuzzleBoard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Stage, Layer } from 'react-konva/lib/ReactKonvaCore'\nimport Konva from \"konva\"\n\nimport ImageDataConsumer, { ImageDataProvider } from '../../contexts/ImageDataContext'\n\nimport FreeDeck from './decks/FreeDeck'\nimport SolvedDeck from './decks/SolvedDeck'\nimport DraggingDeck from './decks/DraggingDeck'\nimport PuzzleBoard from './PuzzleBoard'\nimport Freecell from '../../utils/freecell'\n\nimport { STACKED_CARD_OFFSET_Y, CARD_SHADOW_BLUR } from '../../constants/LAYOUTS'\n\nclass FreeCellCanvas extends React.PureComponent {\n  static propTypes = {\n    gameState: PropTypes.object.isRequired,\n    draggingStartPos: PropTypes.object,\n    draggingCards: PropTypes.array,\n    prevDraggingCardsPos: PropTypes.object,\n    moveCardsToDrag: PropTypes.func.isRequired,\n    moveFreeCardToDrag: PropTypes.func.isRequired,\n    moveDraggingCardsToPuzzle: PropTypes.func.isRequired,\n    moveDraggingCardsToFreeCell: PropTypes.func.isRequired,\n    moveDraggingCardsToSolvedDeck: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    draggingStartPos: { x: 0, y: 0 },\n    draggingCards: [],\n  }\n\n  state = {\n    dragDisabled: false,\n    doubleClickDisabled: false\n  }\n\n  componentDidMount = () => {\n    this.stageNode.on('dblclick dbltap', this.handleStageNodeDoubleClick)\n  }\n\n  getCanvasWidth = () => 1440 // [TODO] Support SSR and responsive simultaneously\n\n  getCanvasHeight = () => 821 // [TODO] Support SSR and responsive simultaneously\n\n  getDroppableFreeCells = () => {\n    const freeDeck = this.stageNode.findOne(\".free-deck\")\n    const allFreeCells = freeDeck.children\n    const freeCells = allFreeCells.filter(cell => {\n      const cellInside = cell.children\n      return !cellInside[cellInside.length - 1].name()\n    })\n\n    return freeCells\n  }\n\n  getDroppableSolvedTopCards = () => {\n    const solvedDeck = this.stageNode.findOne(\".solved-deck\")\n    const allSolvedCells = solvedDeck.children\n    const solvedTopCards = allSolvedCells.map(cell => {\n      const cellInside = cell.children\n      return cellInside[cellInside.length - 1]\n    })\n\n    return solvedTopCards\n  }\n\n  getDroppablePuzzleLeafCards = () => {\n    const puzzleBoard = this.stageNode.findOne(\".puzzle-board\")\n    const stackDecks = puzzleBoard.children\n    const leafCards = stackDecks.map(deck => {\n      const cards = deck.children\n      return cards.length !== 0 ? cards[cards.length - 1] : null\n    })\n\n    return leafCards\n  }\n\n  handlePuzzleDeckDragStart = e => {\n    const cardId = e.target.name()\n\n    const [deckIndex, cardIndex] = Freecell.getCardPosInPuzzleDeck(\n      this.props.gameState.puzzle,\n      cardId\n    )\n    const { x, y } = e.target.getClientRect()\n\n    this.props.moveCardsToDrag(deckIndex, cardIndex, { x, y })\n  }\n\n  handleFreeDeckDragStart = e => {\n    const cardId = e.target.name()\n    const { x, y } = e.target.getClientRect()\n\n    const freeCells = this.props.gameState.free\n    const freeIndex = Object.keys(freeCells).findIndex(\n      key => freeCells[key] === cardId\n    )\n\n    this.props.moveFreeCardToDrag(freeIndex, { x, y })\n  }\n\n  handleDraggingLayerDragStart = e => {\n    e.cancelBubble = true\n\n    e.target.getChildren().each(child => {\n      child.setAttrs({\n        shadowBlur: 16,\n        shadowOpacity: 0.4,\n        shadowOffset: { x: 0, y: 4 },\n      })\n    })\n\n    e.target.setAttrs({\n      scaleX: 1.05,\n      scaleY: 1.05,\n    })\n  }\n\n  handleDraggingLayerDragEnd = e => {\n    this.setState(() => ({ dragDisabled: true }))\n    const draggingCards = e.target\n    const pointerClientX = e.evt.clientX\n    const pointerClientY = e.evt.clientY\n\n    if (this.checkFreeCellsAndDropCard(draggingCards, pointerClientX, pointerClientY)) {\n      return\n    }\n\n    if (this.checkSolvedDecksAndDropCard(draggingCards, pointerClientX, pointerClientY)) {\n      return\n    }\n\n    if (this.checkPuzzleDecksAndDropCards(draggingCards, pointerClientX, pointerClientY)) {\n      return\n    }\n\n    this.bounceBackDraggingCards(draggingCards)\n  }\n\n  handleStageNodeDoubleClick = e => {\n    if (this.state.doubleClickDisabled) {\n      return\n    }\n\n    const clickedCard = e.target\n    const clickedCardId = clickedCard.name()\n    const puzzleLeafCards = this.getDroppablePuzzleLeafCards()\n    if (puzzleLeafCards.some(leafCard => leafCard.name() === clickedCardId) === false) {\n      return \n    }\n    \n    const solvedTopCards = this.getDroppableSolvedTopCards()\n    const targetDropCell = solvedTopCards.find(card => (\n      Freecell.isSolvable(card.name(), clickedCardId)\n    ))\n\n    if (targetDropCell) {\n      const { x: droppedX, y: droppedY } = targetDropCell.getClientRect()\n      const { x: cardX, y: cardY } = clickedCard.getClientRect()\n      const targetPosX = droppedX - cardX\n      const targetPosY = droppedY - cardY\n\n      const [deckIndex, cardIndex] = Freecell.getCardPosInPuzzleDeck(\n        this.props.gameState.puzzle, clickedCardId\n      )\n      const { x, y } = e.target.getClientRect()\n\n      this.setState(() => ({ dragDisabled: true, doubleClickDisabled: true }))\n      this.props.moveCardsToDrag(deckIndex, cardIndex, { x, y })\n\n      setTimeout(() => {\n        const [category, number] = Freecell.getCardCategoryAndNumber(targetDropCell.name())\n  \n        this.animateCardsToPos(\n          this.stageNode.find(`.${clickedCardId}`),\n          targetPosX + (number > 0 ? CARD_SHADOW_BLUR : 1),\n          targetPosY + (number > 0 ? CARD_SHADOW_BLUR : 1),\n          () => {\n            this.setState(() => ({ dragDisabled: false, doubleClickDisabled: false }))\n            this.props.moveDraggingCardsToSolvedDeck(category)\n          }\n        )\n      }, 0)\n    }\n  }\n\n  checkFreeCellsAndDropCard = (draggingCards, pointerClientX, pointerClientY) => {\n    if (this.props.draggingCards.length !== 1) {\n      return false\n    }\n\n    const freeCells = this.getDroppableFreeCells()\n    const targetDropCell = freeCells.find(cell => {\n      const rect = cell.getClientRect()\n      return this.isPosInsideRect(\n        pointerClientX, pointerClientY,\n        rect.x, rect.y, rect.width, rect.height\n      )\n    })\n\n    if (targetDropCell) {\n      const targetDropFreeCellIndex = this.stageNode\n        .findOne(\".free-deck\")\n        .children.findIndex(cell => cell === targetDropCell)\n\n      const { x: targetPosX, y: targetPosY } = targetDropCell.getClientRect()\n      this.animateCardsToPos(\n        draggingCards,\n        targetPosX + 1,\n        targetPosY + 1,\n        () => {\n          this.setState(() => ({ dragDisabled: false }))\n          this.props.moveDraggingCardsToFreeCell(targetDropFreeCellIndex)\n        }\n      )\n\n      return true\n    }\n    return false\n  }\n\n  checkSolvedDecksAndDropCard = (draggingCards, pointerClientX, pointerClientY) => {\n    if (this.props.draggingCards.length !== 1) {\n      return false\n    }\n\n    const solvedTopCards = this.getDroppableSolvedTopCards()\n    const targetDropCell = solvedTopCards.find(card => {\n      const rect = card.getClientRect()\n      return (\n        Freecell.isSolvable(\n          card.name(),\n          this.props.draggingCards[0]\n        ) &&\n        this.isPosInsideRect(\n          pointerClientX, pointerClientY,\n          rect.x, rect.y, rect.width, rect.height\n        )\n      )\n    })\n\n    if (targetDropCell) {\n      const { x: targetPosX, y: targetPosY } = targetDropCell.getClientRect()\n      const [category, number] = Freecell.getCardCategoryAndNumber(\n        targetDropCell.name()\n      )\n\n      this.animateCardsToPos(\n        draggingCards,\n        targetPosX + (number > 0 ? CARD_SHADOW_BLUR : 1),\n        targetPosY + (number > 0 ? CARD_SHADOW_BLUR : 1),\n        () => {\n          this.setState(() => ({ dragDisabled: false }))\n          this.props.moveDraggingCardsToSolvedDeck(category)\n        }\n      )\n\n      return true\n    }\n    return false\n  }\n\n  checkPuzzleDecksAndDropCards = (draggingCards, pointerClientX, pointerClientY) => {\n    const puzzleLeafCards = this.getDroppablePuzzleLeafCards()\n    const emptyDecksNum = puzzleLeafCards.reduce((totalNum, card) => card.name() === \"empty-cell\" ? totalNum + 1 : totalNum, 0)\n    const emptyFreeCellNum = this.getDroppableFreeCells().length\n\n    const targetDropPuzzleDeckIndex = puzzleLeafCards.findIndex(cell => {\n      const rect = cell.getClientRect()\n      return (\n        Freecell.isStackable(\n          cell.name(), emptyDecksNum,\n          emptyFreeCellNum,\n          this.props.draggingCards[0], this.props.draggingCards.length\n        ) &&\n        this.isPosInsideRect(\n          pointerClientX, pointerClientY,\n          rect.x, rect.y, rect.width, rect.height\n        )\n      )\n    })\n    const targetDropCell = puzzleLeafCards[targetDropPuzzleDeckIndex]\n\n    if (targetDropCell) {\n      const { x: targetPosX, y: targetPosY } = targetDropCell.getClientRect()\n      const dropPosOffsetX = targetDropCell.name() !== \"empty-cell\" ? CARD_SHADOW_BLUR : 0\n      const dropPosOffsetY = targetDropCell.name() !== \"empty-cell\" ? STACKED_CARD_OFFSET_Y + CARD_SHADOW_BLUR : 0\n\n      this.animateCardsToPos(\n        draggingCards,\n        targetPosX + dropPosOffsetX,\n        targetPosY + dropPosOffsetY,\n        () => {\n          this.setState(() => ({ dragDisabled: false }))\n          this.props.moveDraggingCardsToPuzzle(targetDropPuzzleDeckIndex)\n        }\n      )\n\n      return true\n    }\n    return false\n  }\n\n  isPosInsideRect = (x, y, rectX, rectY, rectW, rectH) =>\n    rectX <= x && x <= rectX + rectW && rectY <= y && y <= rectY + rectH\n\n  animateCardsToPos(cards, x, y, callback) {\n    let callbackCalled = false\n\n    cards.to({\n      x: x,\n      y: y,\n      duration: 0.15,\n      easing: Konva.Easings.EaseOut,\n      onFinish: () => {\n        cards.getChildren().each(child => {\n          child.to({\n            duration: 0.45,\n            easing: Konva.Easings.ElasticEaseOut,\n            shadowOffsetX: 0,\n            shadowOffsetY: 2,\n            shadowBlur: CARD_SHADOW_BLUR,\n            shadowOpacity: 0.3,\n            onFinish: () => {\n              if (callbackCalled === false) {\n                callback()\n                callbackCalled = true\n              }\n            },\n          })\n        })\n\n        cards.to({\n          duration: 0.45,\n          easing: Konva.Easings.ElasticEaseOut,\n          scaleX: 1,\n          scaleY: 1,\n        })\n      },\n    })\n  }\n\n  bounceBackDraggingCards = (draggingCards) => {\n    const { deckIndex, cardIndex, freeIndex } = this.props.prevDraggingCardsPos\n\n    if (freeIndex >= 0) {\n      const targetDropCell = this.stageNode.findOne(`.freecell-${freeIndex}`)\n      const targetDropPos = targetDropCell.getClientRect()\n\n      this.animateCardsToPos(\n        draggingCards,\n        targetDropPos.x + 1,\n        targetDropPos.y + 1,\n        () => {\n          this.setState(() => ({ dragDisabled: false }))\n          this.props.moveDraggingCardsToFreeCell(freeIndex)\n        }\n      )\n    } else {\n      const endPosCardId = this.props.gameState.puzzle[deckIndex][cardIndex - 1]\n      const targetDropCard = endPosCardId\n        ? this.stageNode.findOne(`.${endPosCardId}`)\n        : this.stageNode.findOne(`.empty-cell`)\n\n      const targetDropPos = targetDropCard.getClientRect()\n      const dropPosOffsetX = endPosCardId ? CARD_SHADOW_BLUR : 0\n      const dropPosOffsetY = endPosCardId\n        ? STACKED_CARD_OFFSET_Y + CARD_SHADOW_BLUR\n        : 0\n\n      this.animateCardsToPos(\n        draggingCards,\n        targetDropPos.x + dropPosOffsetX,\n        targetDropPos.y + dropPosOffsetY,\n        () => {\n          this.setState(() => ({ dragDisabled: false }))\n          this.props.moveDraggingCardsToPuzzle()\n        }\n      )\n    }\n  }\n\n  setStageRef = node => (this.stageNode = node)\n\n  render = () => {\n    const { gameState, draggingCards, draggingStartPos } = this.props\n    const { dragDisabled } = this.state\n\n    return (\n      <ImageDataConsumer>\n        {imageData => (\n          <Stage\n            width={this.getCanvasWidth()}\n            height={this.getCanvasHeight()}\n            ref={this.setStageRef}\n          >\n            <ImageDataProvider imageData={imageData}>\n              {/* Puzzle Layer */}\n              <Layer>\n                <FreeDeck\n                  pos0Card={gameState.free.pos0Card}\n                  pos1Card={gameState.free.pos1Card}\n                  pos2Card={gameState.free.pos2Card}\n                  pos3Card={gameState.free.pos3Card}\n                  onDragStart={this.handleFreeDeckDragStart}\n                />\n                <SolvedDeck\n                  spadeSolvedCards={gameState.solved.spadeSolvedCards}\n                  heartSolvedCards={gameState.solved.heartSolvedCards}\n                  diamondSolvedCards={gameState.solved.diamondSolvedCards}\n                  clubSolvedCards={gameState.solved.clubSolvedCards}\n                />\n\n                <PuzzleBoard\n                  deckOfCards={gameState.puzzle}\n                  dragDisabled={dragDisabled}\n                  onDragStart={this.handlePuzzleDeckDragStart}\n                />\n              </Layer>\n\n              {/* Dragging Cards Layer */}\n              <Layer\n                onDragStart={this.handleDraggingLayerDragStart}\n                onDragEnd={this.handleDraggingLayerDragEnd}\n              >\n                <DraggingDeck\n                  cards={draggingCards}\n                  dragDisabled={dragDisabled}\n                  x={draggingStartPos.x}\n                  y={draggingStartPos.y}\n                />\n              </Layer>\n            </ImageDataProvider>\n          </Stage>\n        )}\n      </ImageDataConsumer>\n    )\n  }\n}\n\nexport default FreeCellCanvas\n","import styled from \"styled-components\"\nimport COLORS from \"../constants/COLORS\"\n\nexport const Wrapper = styled.div`\n  position: absolute;\n  bottom: 32px;\n  right: 32px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-end;\n  flex-direction: column;\n`\n\nexport const Button = styled.button`\n  border: none;\n  padding: 0;\n  font-size: 18px;\n  line-height: 1.39;\n  color: ${COLORS.BLACK};\n  background: transparent;\n  opacity: 0.5;\n  transition: opacity .15s ease;\n  cursor: pointer;\n\n  &:hover, &:active {\n    opacity: 1;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  & + & {\n    margin-top: 16px;\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Wrapper, Button } from \"./GameControls.css\"\n\nconst GameControls = ({ onNewGameClick, onGameRestartClick }) => {\n\n  return (\n    <Wrapper>\n      <Button onClick={onGameRestartClick}>RESTART GAME</Button>\n      <Button onClick={onNewGameClick}>NEW GAME</Button>\n    </Wrapper>\n  )\n}\n\nGameControls.propTypes = {\n  onNewGameClick: PropTypes.func.isRequired,\n  onGameRestartClick: PropTypes.func.isRequired\n}\n\nexport default GameControls\n","import styled from \"styled-components\"\nimport COLORS from \"../constants/COLORS\"\n\nexport const Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: ${COLORS.GREY};\n  transition: visibility 0s linear, opacity .15s ease;\n\n  ${props => props.isHided ? ({\n    opacity: 0,\n    visibility: \"hidden\",\n    transition: \"opacity .6s ease, visibility 0s linear .6s\"\n  }) : null}\n`\n\nexport const Title = styled.h1`\n  margin: 0;\n  font-size: 50px;\n  line-height: 1.38;\n  text-align: left;\n  color: ${COLORS.BLACK};\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Lottie from \"react-lottie\"\n\nimport { Wrapper, Title } from \"./LoadingOverlay.css\"\n\nimport loadingAnimation from \"../lottie/loading.json\"\n\nconst LoadingOverlay = ({ isStopped, onCompleted }) => {\n  const lottieOption = {\n    loop: 1,\n    autoplay: true,\n    animationData: loadingAnimation,\n  }\n\n  const lottieEvents = [{\n    eventName: \"complete\",\n    callback: () => onCompleted()\n  }]\n\n  return (\n    <Wrapper isHided={isStopped}>\n      <Title>Free Cell</Title>\n      <Lottie\n        options={lottieOption}\n        isStopped={isStopped}\n        width={360}\n        height={160}\n        eventListeners={lottieEvents}\n      />\n    </Wrapper>\n  )\n}\n\nLoadingOverlay.propTypes = {\n  isStopped: PropTypes.bool,\n  onCompleted: PropTypes.func\n}\nLoadingOverlay.defaultProps = {\n  isStopped: false,\n  onCompleted: () => {}\n}\n\nexport default LoadingOverlay\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Container } from \"./FreeCellBoard.css\"\nimport FreeCellCanvas from \"./FreeCellCanvas\"\nimport GameControls from \"./GameControls\"\nimport LoadingOverlay from \"./LoadingOverlay\"\n\nclass FreeCellBoard extends React.PureComponent {\n  static propTypes = {\n    boardData: PropTypes.array.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n\n    const boardIndex = this.getRandomBoardDataIndex()\n    this.state = {\n      gameState: {\n        puzzle: props.boardData[boardIndex],\n        free: {\n          pos0Card: null, pos1Card: null, pos2Card: null, pos3Card: null\n        },\n        solved: {\n          spadeSolvedCards: [],\n          heartSolvedCards: [],\n          diamondSolvedCards: [],\n          clubSolvedCards: []\n        }\n      },\n      curBoardIndex: boardIndex,\n      history: [],\n      draggingStartPos: { x: 0, y: 0 },\n      draggingCards: [],\n      prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 },\n      isLoadingStopped: false\n    }\n  }\n\n  handleNewGameClick = () => {\n    let newBoardIndex = this.state.curBoardIndex\n    do {\n      newBoardIndex = this.getRandomBoardDataIndex()\n    } while (newBoardIndex === this.state.curBoardIndex)\n\n    this.setState(() => ({ isLoadingStopped: false }))\n\n    setTimeout(() => {\n      this.setState(() => ({\n        gameState: {\n          puzzle: this.props.boardData[newBoardIndex],\n          free: {\n            pos0Card: null, pos1Card: null, pos2Card: null, pos3Card: null\n          },\n          solved: {\n            spadeSolvedCards: [],\n            heartSolvedCards: [],\n            diamondSolvedCards: [],\n            clubSolvedCards: []\n          }\n        },\n        curBoardIndex: newBoardIndex\n      }))\n    }, 150)\n  }\n\n  handleGameRestartClick = () => {\n    this.setState(() => ({ isLoadingStopped: false }))\n\n    setTimeout(() => {\n      this.setState(state => ({\n        gameState: {\n          puzzle: this.props.boardData[state.curBoardIndex],\n          free: {\n            pos0Card: null, pos1Card: null, pos2Card: null, pos3Card: null\n          },\n          solved: {\n            spadeSolvedCards: [],\n            heartSolvedCards: [],\n            diamondSolvedCards: [],\n            clubSolvedCards: []\n          }\n        }\n      })\n    )}, 150)\n  }\n\n  handleLoadingCompleted = () => this.setState(() => ({ isLoadingStopped: true }))\n\n  moveCardsToDrag = (deckIndex, cardIndex, startPos) => {\n    const { gameState } = this.state\n\n    const updatedDeckCards = gameState.puzzle[deckIndex].slice(0, cardIndex)\n    const toDraggingCards = gameState.puzzle[deckIndex].slice(cardIndex)\n\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        puzzle: [\n          ...state.gameState.puzzle.slice(0, deckIndex),\n          updatedDeckCards,\n          ...state.gameState.puzzle.slice(deckIndex + 1)\n        ]\n      },\n      draggingCards: toDraggingCards,\n      draggingStartPos: startPos,\n      prevDraggingCardsPos: { ...state.prevDraggingCardsPos, deckIndex, cardIndex }\n    }))\n  }\n\n  moveFreeCardToDrag = (freeIndex, startPos) => {\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        free: {\n          ...state.gameState.free,\n          [`pos${freeIndex}Card`]: null,\n        },\n      },\n      draggingCards: [ state.gameState.free[`pos${freeIndex}Card`] ],\n      draggingStartPos: startPos,\n      prevDraggingCardsPos: { ...state.prevDraggingCardsPos, freeIndex },\n    }))\n  }\n\n  moveDraggingCardsToPuzzle = (deckIndex) => {\n    const { gameState, draggingCards, prevDraggingCardsPos } = this.state\n    const targetDeckIndex = typeof deckIndex !== \"undefined\"\n      ? deckIndex\n      : prevDraggingCardsPos.deckIndex\n    \n    const updatedDeckCards = gameState.puzzle[targetDeckIndex].concat(draggingCards)\n\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        puzzle: [\n          ...state.gameState.puzzle.slice(0, targetDeckIndex),\n          updatedDeckCards,\n          ...state.gameState.puzzle.slice(targetDeckIndex + 1)\n        ]\n      }\n    }))\n\n    setTimeout(() => this.setState(() => ({\n      draggingCards: [],\n      draggingStartPos: { x: 0, y: 0 },\n      prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 }\n    })), 0)\n  }\n\n  moveDraggingCardsToFreeCell = (i) => {\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        free: {\n          ...state.gameState.free,\n          [`pos${i}Card`]: state.draggingCards[0]\n        },\n      },\n    }))\n\n    setTimeout(() => this.setState(() => ({\n      draggingCards: [],\n      draggingStartPos: { x: 0, y: 0 },\n      prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 },\n    })), 0)\n  }\n\n  moveDraggingCardsToSolvedDeck = (category) => {\n    this.setState(state => ({\n      gameState: {\n        ...state.gameState,\n        solved: {\n          ...state.gameState.solved,\n          [`${category}SolvedCards`]: state.gameState.solved[\n            `${category}SolvedCards`\n          ].concat(state.draggingCards),\n        },\n      },\n    }))\n\n    setTimeout(() => this.setState(() => ({\n      draggingCards: [],\n      draggingStartPos: { x: 0, y: 0 },\n      prevDraggingCardsPos: { deckIndex: -1, cardIndex: -1, freeIndex: -1 },\n    })), 0)\n  }\n\n  getRandomBoardDataIndex = () => {\n    const { boardData } = this.props\n    return Math.floor((Math.random() * 10) % boardData.length)\n  }\n\n  render = () => {\n    const { gameState, draggingStartPos, draggingCards, prevDraggingCardsPos, isLoadingStopped } = this.state\n    \n    return (\n      <Container>\n        <FreeCellCanvas\n          gameState={gameState}\n          draggingStartPos={draggingStartPos}\n          draggingCards={draggingCards}\n          prevDraggingCardsPos={prevDraggingCardsPos}\n          moveCardsToDrag={this.moveCardsToDrag}\n          moveFreeCardToDrag={this.moveFreeCardToDrag}\n          moveDraggingCardsToPuzzle={this.moveDraggingCardsToPuzzle}\n          moveDraggingCardsToFreeCell={this.moveDraggingCardsToFreeCell}\n          moveDraggingCardsToSolvedDeck={this.moveDraggingCardsToSolvedDeck}\n        />\n        <GameControls\n          onNewGameClick={this.handleNewGameClick}\n          onGameRestartClick={this.handleGameRestartClick}\n        />\n        <LoadingOverlay isStopped={isLoadingStopped} onCompleted={this.handleLoadingCompleted} />\n      </Container>\n    )\n  }\n}\n\nexport default FreeCellBoard\n","import React from \"react\"\n\nimport { ImageDataProvider } from \"../contexts/ImageDataContext\"\nimport { useCardImageData } from \"../hooks/useCardImageData\"\nimport { useBoardData } from \"../hooks/useBoardData\"\n\nimport SEO from \"../layouts/SEO\"\nimport GlobalStyles from \"../layouts/GlobalStyles\"\nimport FreeCellBoard from \"../components/FreeCellBoard\"\n\nexport default () => {\n  const data = useCardImageData()\n  const boardData = useBoardData()\n\n  return (\n    <ImageDataProvider imageData={data}>\n      <SEO title=\"Retro Free Cell\" />\n      <GlobalStyles />\n\n      <FreeCellBoard boardData={boardData} />\n    </ImageDataProvider>\n  )\n}\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useCardImageData = () => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        club_a: file(relativePath: { eq: \"cards/club_a.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_2: file(relativePath: { eq: \"cards/club_2.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_3: file(relativePath: { eq: \"cards/club_3.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_4: file(relativePath: { eq: \"cards/club_4.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_5: file(relativePath: { eq: \"cards/club_5.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_6: file(relativePath: { eq: \"cards/club_6.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_7: file(relativePath: { eq: \"cards/club_7.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_8: file(relativePath: { eq: \"cards/club_8.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_9: file(relativePath: { eq: \"cards/club_9.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_10: file(relativePath: { eq: \"cards/club_10.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_j: file(relativePath: { eq: \"cards/club_j.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_q: file(relativePath: { eq: \"cards/club_q.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_k: file(relativePath: { eq: \"cards/club_k.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_a: file(relativePath: { eq: \"cards/diamond_a.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_2: file(relativePath: { eq: \"cards/diamond_2.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_3: file(relativePath: { eq: \"cards/diamond_3.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_4: file(relativePath: { eq: \"cards/diamond_4.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_5: file(relativePath: { eq: \"cards/diamond_5.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_6: file(relativePath: { eq: \"cards/diamond_6.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_7: file(relativePath: { eq: \"cards/diamond_7.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_8: file(relativePath: { eq: \"cards/diamond_8.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_9: file(relativePath: { eq: \"cards/diamond_9.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_10: file(relativePath: { eq: \"cards/diamond_10.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_j: file(relativePath: { eq: \"cards/diamond_j.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_q: file(relativePath: { eq: \"cards/diamond_q.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_k: file(relativePath: { eq: \"cards/diamond_k.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_a: file(relativePath: { eq: \"cards/heart_a.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_2: file(relativePath: { eq: \"cards/heart_2.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_3: file(relativePath: { eq: \"cards/heart_3.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_4: file(relativePath: { eq: \"cards/heart_4.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_5: file(relativePath: { eq: \"cards/heart_5.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_6: file(relativePath: { eq: \"cards/heart_6.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_7: file(relativePath: { eq: \"cards/heart_7.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_8: file(relativePath: { eq: \"cards/heart_8.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_9: file(relativePath: { eq: \"cards/heart_9.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_10: file(relativePath: { eq: \"cards/heart_10.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_j: file(relativePath: { eq: \"cards/heart_j.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_q: file(relativePath: { eq: \"cards/heart_q.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_k: file(relativePath: { eq: \"cards/heart_k.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_a: file(relativePath: { eq: \"cards/spade_a.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_2: file(relativePath: { eq: \"cards/spade_2.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_3: file(relativePath: { eq: \"cards/spade_3.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_4: file(relativePath: { eq: \"cards/spade_4.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_5: file(relativePath: { eq: \"cards/spade_5.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_6: file(relativePath: { eq: \"cards/spade_6.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_7: file(relativePath: { eq: \"cards/spade_7.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_8: file(relativePath: { eq: \"cards/spade_8.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_9: file(relativePath: { eq: \"cards/spade_9.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_10: file(relativePath: { eq: \"cards/spade_10.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_j: file(relativePath: { eq: \"cards/spade_j.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_q: file(relativePath: { eq: \"cards/spade_q.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_k: file(relativePath: { eq: \"cards/spade_k.png\" }) {\n          childImageSharp {\n            fixed(width: 200) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        club_watermark: file(\n          relativePath: { eq: \"img_watermark_club.png\" }\n        ) {\n          childImageSharp {\n            fixed(width: 120) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        diamond_watermark: file(\n          relativePath: { eq: \"img_watermark_diamond.png\" }\n        ) {\n          childImageSharp {\n            fixed(width: 120) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        heart_watermark: file(\n          relativePath: { eq: \"img_watermark_heart.png\" }\n        ) {\n          childImageSharp {\n            fixed(width: 120) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        spade_watermark: file(\n          relativePath: { eq: \"img_watermark_spade.png\" }\n        ) {\n          childImageSharp {\n            fixed(width: 120) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n    `\n  )\n\n  return data\n}\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport const useBoardData = () => {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        allDataJson {\n          edges {\n            node {\n              board\n            }\n          }\n        }\n      }\n    `\n  )\n\n  return data.allDataJson.edges.map(edge => edge.node.board)\n}\n"],"sourceRoot":""}