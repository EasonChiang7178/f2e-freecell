{"version":3,"sources":["webpack:///./src/contexts/ImageDataContext.js","webpack:///./src/layouts/SEO.js","webpack:///./src/constants/COLORS.js","webpack:///./src/layouts/GlobalStyles.js","webpack:///./src/components/FreeCellCanvas/cells/EmptyCell.js","webpack:///./src/components/FreeCellCanvas/Image.js","webpack:///./src/components/FreeCellCanvas/cells/Card.js","webpack:///./src/components/FreeCellCanvas/decks/FreeDeck.js","webpack:///./src/components/FreeCellCanvas/cells/EmptyWaterMarkCell.js","webpack:///./src/components/FreeCellCanvas/decks/SolvedDeck.js","webpack:///./src/utils/freecell.js","webpack:///./src/constants/LAYOUTS.js","webpack:///./src/components/FreeCellCanvas/decks/StackedDeck.js","webpack:///./src/components/FreeCellCanvas/decks/DraggingDeck.js","webpack:///./src/components/FreeCellCanvas/PuzzleBoard.js","webpack:///./src/components/FreeCellCanvas/index.js","webpack:///./src/components/FreeCellBoard.js","webpack:///./src/pages/index.js"],"names":["React","createContext","Provider","Consumer","ImageDataProvider","render","react_default","a","createElement","value","_this","props","imageData","children","PureComponent","SEO","_ref","description","lang","meta","title","site","_2417117884","data","metaDescription","siteMetadata","Helmet_default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","COLORS","GREY","RED","YELLOW","BLACK","BLUE","Global","createGlobalStyle","_templateObject","GlobalStyles","Fragment","dist","EmptyCell","ReactKonvaCore","x","y","width","height","cornerRadius","fill","stroke","strokeWidth","opacity","CanvasImage","state","image","loadPlaceholder","handleLoad","setState","handleMoveOver","document","body","style","cursor","handleMoveOut","_this$props","draggable","Object","assign","ref","node","imageNode","onMouseOver","onMouseOut","onDragStart","onDragEnd","componentDidMount","this","loadImage","componentDidUpdate","oldProps","_this2","src","srcSet","base64","placeholder","componentWillUnmount","removeEventListener","window","Image","addEventListener","Card","id","_this$props$imageData","childImageSharp","fixed","FreeCellCanvas_Image","cells_Card","Card_Card","FreeDeck","renderCell","i","card","cells_EmptyCell","key","EmptyWaterMarkCell","_this$props$waterMark","waterMarkData","cells_EmptyWaterMarkCell","EmptyWaterMarkCell_EmptyWaterMarkCell","category","SolvedDeck","renderSolvedSpadeDeck","renderDeck","renderSolvedHeartDeck","renderSolvedDiamondDeck","renderSolvedClubDeck","solvedCards","topCard","length","spadeSolvedCards","heartSolvedCards","diamondSolvedCards","clubSolvedCards","Freecell","isCardInStackDraggable","cards","cardInIndex","slice","every","self","_this$getCardColorAnd","getCardColorAndNumber","cardColor","cardNumber","_this$getCardColorAnd2","nextCardColor","nextCardNumber","getCardPosInPuzzleDeck","cardsOfDecks","cardId","j","Error","getCardCategoryAndNumber","_cardId$split","split","number","getCardNumber","_cardId$split2","getCardColor","numString","parseInt","STACKED_CARD_OFFSET_Y","StackedDeck","isCardDraggable","renderCards","map","setRef","DraggingDeck","draggingNode","startDrag","setDraggingDeckRef","decks_StackedDeck","PuzzleBoard","renderStackedDecks","deckOfCards","FreeCellCanvas","getCanvasWidth","getCanvasHeight","handlePuzzleLayerDragStart","e","target","_Freecell$getCardPosI","gameState","deckIndex","cardIndex","_e$target$getClientRe","getClientRect","moveCardsToDrag","handleDraggingLayerDragEnd","_this$props$prevDragg","prevDraggingCardsPos","endPosCardId","targetDropPos","stageNode","findOne","to","duration","easing","Konva","Easings","EaseOut","onFinish","getChildren","each","child","ElasticEaseOut","shadowOffsetX","shadowOffsetY","shadowBlur","scaleX","scaleY","moveDraggingCardsToPuzzle","handleDraggingLayerDragStart","cancelBubble","setAttrs","shadowColor","shadowOpacity","shadowOffset","setStageRef","draggingCards","draggingStartPos","ImageDataContext_ImageDataProvider","decks_FreeDeck","decks_SolvedDeck","FreeCellCanvas_PuzzleBoard","decks_DraggingDeck","FreeCellBoard","history","startPos","updatedDeckCards","toDraggingCards","_toConsumableArray","_this$state","targetDeckIndex","setTimeout","_this$state2","components_FreeCellCanvas","__webpack_require__","d","__webpack_exports__","query","layouts_SEO","layouts_GlobalStyles","components_FreeCellBoard"],"mappings":"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","file":"component---src-pages-index-js-6ef646a4e6c8c2cce5c4.js","sourcesContent":["import React from \"react\"\n\nconst defaultContextValue = {}\n\nconst { Provider, Consumer } = React.createContext(defaultContextValue)\n\nclass ImageDataProvider extends React.PureComponent {\n  render = () => (\n    <Provider value={this.props.imageData}>\n      {this.props.children}\n    </Provider>\n  )\n}\n\nexport { Consumer as default, ImageDataProvider }\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `zh-TW`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","const COLORS = {\n  GREY: \"#dbd3ca\",\n  RED: \"#a93d2d\",\n  YELLOW: \"#c99d31\",\n  BLACK: \"#4d4d4d\",\n  BLUE: \"#6ca39f\",\n}\n\nexport default COLORS\n","import React from \"react\"\nimport { Normalize } from 'styled-normalize'\nimport { createGlobalStyle } from 'styled-components'\n\nimport COLORS from \"../constants/COLORS\"\n\nconst Global = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=DM+Serif+Text&display=swap');\n  body {\n    font-family: 'DM Serif Text', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Open Sans', 'Helvetica Neue', sans-serif;\n    background-color: ${COLORS.GREY};\n  }\n`\n\nclass GlobalStyles extends React.PureComponent {\n  render = () => (\n    <>\n      <Normalize />\n      <Global />\n    </>\n  )\n}\n\nexport default GlobalStyles\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Rect } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Rect\"\n\nimport COLORS from \"../../../constants/COLORS\"\n\n\nclass EmptyCell extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0\n  }\n\n  render = () => (\n    <Rect\n      x={this.props.x}\n      y={this.props.y}\n      width={100}\n      height={150}\n      cornerRadius={5}\n      fill=\"transparent\"\n      stroke={COLORS.BLACK}\n      strokeWidth={1}\n      opacity={0.2}\n    />\n  )\n}\n\nexport default EmptyCell\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Image } from 'react-konva/lib/ReactKonvaCore'\nimport \"konva/lib/shapes/Image\"\n\nclass CanvasImage extends React.PureComponent {\n  static propTypes = {\n    name: PropTypes.string,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    base64: PropTypes.string,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    src: PropTypes.string,\n    srcSet: PropTypes.string,\n    draggable: PropTypes.bool.isRequired\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    draggable: false\n  }\n\n  state = {\n    image: this.loadPlaceholder()\n  }\n\n  componentDidMount() {\n    this.loadImage()\n  }\n\n  componentDidUpdate(oldProps) {\n    if (\n      oldProps.src !== this.props.src &&\n      oldProps.srcSet !== this.props.srcSet\n    ) {\n      this.loadImage()\n\n      if (this.props.base64) {\n        this.setState(() => ({\n          placeholder: this.loadPlaceholder()\n        }))\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.image.removeEventListener('load', this.handleLoad)\n  }\n\n  loadPlaceholder() {\n    if (!this.props.base64) {\n      return null\n    }\n\n    const placeholder = new window.Image()\n    placeholder.src = this.props.base64\n    return placeholder\n  }\n\n  loadImage() {\n    this.image = new window.Image()\n    this.image.src = this.props.src\n    this.image.srcSet = this.props.srcSet // [NOTE] not working, maybe canvas image not support srcSet?\n    this.image.addEventListener('load', this.handleLoad)\n  }\n\n  handleLoad = () => {\n    this.setState({\n      image: this.image\n    })\n  }\n\n  handleMoveOver = () => {\n    document.body.style.cursor = 'pointer'\n  }\n\n  handleMoveOut = () => {\n    document.body.style.cursor = 'default'\n  }\n\n  render = () => {\n    const { name, x, y, width, height, draggable } = this.props\n\n    return (\n      <Image\n        name={name}\n        x={x}\n        y={y}\n        width={width}\n        height={height}\n        image={this.state.image}\n        draggable={draggable}\n        ref={node => {\n          this.imageNode = node\n        }}\n        {...(draggable && {\n          onMouseOver: this.handleMoveOver,\n          onMouseOut: this.handleMoveOut,\n          onDragStart: () => {}, // [NOTE] handle the drag events by event delegation in State component\n          onDragEnd: () => {}\n        })}\n      />\n    )\n  }\n}\n\nexport default CanvasImage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport ImageDataConsumer from \"../../../contexts/ImageDataContext\"\nimport Image from \"../Image\"\n\nclass Card extends React.PureComponent {\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    x: PropTypes.number,\n    y: PropTypes.number,\n    draggable: PropTypes.bool\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    draggable: false\n  }\n\n  render = () => {\n    const { id, x, y, draggable } = this.props\n    const { base64, width, height, src, srcSet } = this.props.imageData.childImageSharp.fixed\n    \n    return (\n      <Image\n        x={x}\n        y={y}\n        name={id}\n        base64={base64}\n        width={width / 2} // [NOTE] hotfix, for retina resolution support\n        height={height / 2}\n        src={src}\n        srcSet={srcSet}\n        draggable={draggable}\n      />\n    )\n  }\n}\n\nexport default (props) => (\n  <ImageDataConsumer>\n    {(imageData) => <Card imageData={imageData[props.id]} {...props} />}\n  </ImageDataConsumer>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport EmptyCell from \"../cells/EmptyCell\"\nimport Card from \"../cells/Card\"\n\nclass FreeDeck extends React.PureComponent {\n  static propTypes = {\n    pos0Card: PropTypes.object,\n    pos1Card: PropTypes.object,\n    pos2Card: PropTypes.object,\n    pos3Card: PropTypes.object\n  }\n\n  renderCell = (i) => {\n    const card = this.props[`pos${i}Card`]\n\n    return (\n      <Group x={(100 + 16) * i} y={0}>\n        <EmptyCell />\n        {card && <Card key={card.id} imageData={card.imageData} />}\n      </Group>\n    )\n  }\n\n  render = () => {\n\n    return (\n      <Group x={139} y={51}>\n        {this.renderCell(0)}\n        {this.renderCell(1)}\n        {this.renderCell(2)}\n        {this.renderCell(3)}\n      </Group>\n    )\n  }\n}\n\nexport default FreeDeck","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport ImageDataConsumer from \"../../../contexts/ImageDataContext\"\n\nimport EmptyCell from './EmptyCell'\nimport Image from '../Image'\n\nclass EmptyWaterMarkCell extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    category: PropTypes.string.isRequired,\n    waterMarkData: PropTypes.object\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0\n  }\n\n  render = () => {\n    const { base64, width, height, src, srcSet } = this.props.waterMarkData.childImageSharp.fixed\n\n    return (\n      <Group x={this.props.x} y={this.props.y}>\n        <EmptyCell />\n        <Image\n          x={20}\n          y={45}\n          base64={base64}\n          width={width / 2} // [NOTE] hotfix, for retina resolution support\n          height={height / 2}\n          src={src}\n          srcSet={srcSet}\n        />\n      </Group>\n    )\n  }\n}\n\n\nexport default (props) => (\n  <ImageDataConsumer>\n    {(imageData) => <EmptyWaterMarkCell waterMarkData={imageData[`${props.category}_watermark`]} {...props} />}\n  </ImageDataConsumer>\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport EmptyWaterMarkCell from \"../cells/EmptyWaterMarkCell\"\nimport Card from \"../cells/Card\"\n\nclass SolvedDeck extends React.PureComponent {\n  static propTypes = {\n    spadeSolvedCards: PropTypes.array,\n    heartSolvedCards: PropTypes.array,\n    diamondSolvedCards: PropTypes.array,\n    clubSolvedCards: PropTypes.array\n  }\n\n  static defaultProps = {\n    spadeSolvedCards: [],\n    heartSolvedCards: [],\n    diamondSolvedCards: [],\n    clubSolvedCards: []\n  }\n\n  renderSolvedSpadeDeck = () => this.renderDeck(0, \"spade\")\n  renderSolvedHeartDeck = () => this.renderDeck(1, \"heart\")\n  renderSolvedDiamondDeck = () => this.renderDeck(2, \"diamond\")\n  renderSolvedClubDeck = () => this.renderDeck(3, \"club\")\n\n  renderDeck = (i, category) => {\n    const solvedCards = this.props[`${category}SolvedCards`]\n    const topCard = solvedCards.length > 0 ? solvedCards[solvedCards.length - 1] : null\n    \n    return (\n      <Group x={(100 + 16) * i} y={0}>\n        <EmptyWaterMarkCell category={category} />\n        {topCard && <Card key={topCard.id} imageData={topCard.imageData} />}\n      </Group>\n    )\n  }\n\n  render = () => {\n    return (\n      <Group x={687} y={51}>\n        {this.renderSolvedSpadeDeck()}\n        {this.renderSolvedHeartDeck()}\n        {this.renderSolvedDiamondDeck()}\n        {this.renderSolvedClubDeck()}\n      </Group>\n    )\n  }\n}\n\nexport default SolvedDeck\n","class Freecell {\n  static isCardInStackDraggable(cards, cardInIndex) {\n    if (cards.length === 0) {\n      return false\n    }\n\n    const stackLength = cards.length\n    if (stackLength === cardInIndex + 1) {\n      return true\n    } \n    \n    return cards.slice(cardInIndex).every((card, i, self) => {\n      if (self.length === i + 1) {\n        return true\n      }\n\n      const [cardColor, cardNumber] = this.getCardColorAndNumber(card.id)\n      const [nextCardColor, nextCardNumber] = this.getCardColorAndNumber(self[i + 1].id)\n\n      return (\n        (cardColor !== nextCardColor) &&\n        (cardNumber === nextCardNumber + 1)\n      )\n    })\n  }\n\n  static getCardPosInPuzzleDeck(cardsOfDecks, cardId) {\n    for (let i = 0; i < cardsOfDecks.length; i++) {\n      for (let j = 0; j < cardsOfDecks[i].length; j++) {\n        if (cardsOfDecks[i][j].id === cardId) {\n          return [i, j]\n        }\n      }\n    }\n\n    throw Error(\"Card not find in puzzle!\")\n  }\n\n  static getCardCategoryAndNumber(cardId) {\n    const [ category, number ] = cardId.split(\"_\")\n    return [ category, this.getCardNumber(number) ]\n  }\n\n  static getCardColorAndNumber(cardId) {\n    const [category, number] = cardId.split(\"_\")\n    return [this.getCardColor(category), this.getCardNumber(number)]\n  }\n\n  static getCardNumber(numString) {\n    switch(numString) {\n      case \"k\":\n        return 13\n      case \"q\":\n        return 12\n      case \"j\":\n        return 11\n      case \"a\":\n        return 1\n      default:\n        return parseInt(numString)\n    }\n  }\n\n  static getCardColor(category) {\n    switch(category) {\n      case \"club\":\n      case \"spade\":\n        return \"black\"\n      case \"heart\":\n      case \"diamond\":\n        return \"red\"\n      default:\n        throw Error(\"Unknown card category!\")\n    }\n  }\n}\n\nexport default Freecell\n","export const STACKED_CARD_OFFSET_Y = 32\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport Card from \"../cells/Card\"\nimport Freecell from \"../../../utils/freecell\"\n\nimport { STACKED_CARD_OFFSET_Y } from \"../../../constants/LAYOUTS\"\n\nclass StackedDeck extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    cards: PropTypes.array,\n    setRef: PropTypes.func\n  }\n\n  static defaultProps = {\n    x: 0,\n    y: 0,\n    cards: []\n  }\n\n  isCardDraggable = (i) => {\n    return Freecell.isCardInStackDraggable(this.props.cards, i)\n  }\n\n  renderCards = () => this.props.cards.map((card, i) => (\n    <Card id={card.id} key={card.id} x={0} y={STACKED_CARD_OFFSET_Y * i} draggable={this.isCardDraggable(i)} />\n  ))\n\n  render = () => {\n    const { x, y, setRef } = this.props\n    \n    return (\n      <Group x={x} y={y} {...(setRef && { ref: setRef })}>\n        {this.renderCards()}\n      </Group>\n    )\n  }\n}\n\nexport default StackedDeck\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport StackedDeck from \"./StackedDeck\";\n\nclass DraggingDeck extends React.PureComponent {\n  static propTypes = {\n    cards: PropTypes.array,\n    x: PropTypes.number,\n    y: PropTypes.number\n  }\n\n  static defaultProps = {\n    cards: [],\n    x: 0,\n    y: 0\n  }\n\n  componentDidUpdate = (oldProps) => {\n    if (oldProps.cards.length === 0 && this.props.cards.length !== 0) {\n      this.draggingNode.startDrag()\n    }\n  }\n\n  setDraggingDeckRef = (node) => {\n    this.draggingNode = node\n  }\n\n  render = () => {\n    const { cards, x, y } = this.props\n\n    return cards.length !== 0 && (\n      <StackedDeck cards={cards} x={x} y={y} setRef={this.setDraggingDeckRef} />\n    )\n  }\n}\n\nexport default DraggingDeck","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Group } from 'react-konva/lib/ReactKonvaCore'\n\nimport StackedDeck from \"./decks/StackedDeck\"\n\nclass PuzzleBoard extends React.PureComponent {\n  static propTypes = {\n    x: PropTypes.number,\n    y: PropTypes.number,\n    deckOfCards: PropTypes.array\n  }\n\n  static defaultProps = {\n    x: 179,\n    y: 234,\n    deckOfCards: []\n  }\n\n  renderStackedDecks = () => this.props.deckOfCards.map((cards, i) => (\n    <StackedDeck key={i} cards={cards} x={(100 + 16) * i} y={0} />\n  ))\n\n  render = () => {\n    const { x, y } = this.props\n\n    return (\n      <Group x={x} y={y}>\n        {this.renderStackedDecks()}\n      </Group>\n    )\n  }\n}\n\nexport default PuzzleBoard\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Stage, Layer } from 'react-konva/lib/ReactKonvaCore'\nimport Konva from \"konva\"\n\nimport ImageDataConsumer, { ImageDataProvider } from '../../contexts/ImageDataContext'\n\nimport FreeDeck from './decks/FreeDeck'\nimport SolvedDeck from './decks/SolvedDeck'\nimport DraggingDeck from './decks/DraggingDeck'\nimport PuzzleBoard from './PuzzleBoard'\nimport Freecell from '../../utils/freecell'\n\nimport { STACKED_CARD_OFFSET_Y } from '../../constants/LAYOUTS'\nimport COLORS from '../../constants/COLORS'\n\nclass FreeCellCanvas extends React.PureComponent {\n  static propTypes = {\n    gameState: PropTypes.array.isRequired,\n    draggingStartPos: PropTypes.object,\n    draggingCards: PropTypes.array,\n    prevDraggingCardsPos: PropTypes.object,\n    moveCardsToDrag: PropTypes.func.isRequired,\n    moveDraggingCardsToPuzzle: PropTypes.func.isRequired\n  }\n\n  static defaultProps = {\n    draggingStartPos: { x: 0, y: 0 },\n    draggingCards: []\n  }\n\n  getCanvasWidth = () => 1440 // [TODO] Support SSR and responsive simultaneously\n\n  getCanvasHeight = () => 821 // [TODO] Support SSR and responsive simultaneously\n\n  handlePuzzleLayerDragStart = (e) => {\n    const cardId = e.target.name()\n\n    const [deckIndex, cardIndex] = Freecell.getCardPosInPuzzleDeck(this.props.gameState, cardId)\n    const { x, y } = e.target.getClientRect()\n    \n    this.props.moveCardsToDrag(deckIndex, cardIndex, { x, y })\n  }\n\n  handleDraggingLayerDragEnd = (e) => {\n    const { deckIndex, cardIndex } = this.props.prevDraggingCardsPos\n    const endPosCardId = this.props.gameState[deckIndex][cardIndex - 1]\n    \n    const targetDropCard = this.stageNode.findOne(`.${endPosCardId.id}`)\n    const targetDropPos = targetDropCard.getClientRect()\n\n    e.target.to({\n      x: targetDropPos.x,\n      y: targetDropPos.y + STACKED_CARD_OFFSET_Y,\n      duration: 0.15,\n      easing: Konva.Easings.EaseOut,\n      onFinish: () => {\n        e.target.getChildren().each(child => {\n          child.to({\n            duration: 0.6,\n            easing: Konva.Easings.ElasticEaseOut,\n            shadowOffsetX: 0, shadowOffsetY: 0,\n            shadowBlur: 0,\n          })\n        })\n\n        e.target.to({\n          duration: 0.6,\n          easing: Konva.Easings.ElasticEaseOut,\n          scaleX: 1, scaleY: 1,\n          onFinish: () => {\n            this.props.moveDraggingCardsToPuzzle()\n          }\n        })\n      }\n    })\n  }\n\n  handleDraggingLayerDragStart = (e) => {\n    e.cancelBubble = true\n    \n    e.target.getChildren().each(child => {\n      child.setAttrs({\n        shadowColor: COLORS.BLACK,\n        shadowBlur: 16,\n        shadowOpacity: .4,\n        shadowOffset: { x: 0, y: 4 },\n      })\n    })\n\n    e.target.setAttrs({\n      scaleX: 1.05, scaleY: 1.05\n    })\n  }\n\n  setStageRef = (node) => this.stageNode = node\n\n  render = () => {\n    const { gameState, draggingCards, draggingStartPos } = this.props\n\n    return (\n      <ImageDataConsumer>\n        {imageData => (\n          <Stage\n            width={this.getCanvasWidth()}\n            height={this.getCanvasHeight()}\n            ref={this.setStageRef}\n          >\n            <ImageDataProvider imageData={imageData}>\n\n              {/* Puzzle Layer */}\n              <Layer onDragStart={this.handlePuzzleLayerDragStart}>\n                <FreeDeck />\n                <SolvedDeck />\n\n                <PuzzleBoard deckOfCards={gameState} />\n              </Layer>\n\n              {/* Dragging Cards Layer */}\n              <Layer onDragStart={this.handleDraggingLayerDragStart} onDragEnd={this.handleDraggingLayerDragEnd}>\n                <DraggingDeck cards={draggingCards} x={draggingStartPos.x} y={draggingStartPos.y} />\n              </Layer>\n\n            </ImageDataProvider>\n          </Stage>\n        )}\n      </ImageDataConsumer>\n    )\n  }\n}\n\nexport default FreeCellCanvas\n","import React from \"react\"\nimport FreeCellCanvas from \"./FreeCellCanvas\"\n\nclass FreeCellBoard extends React.PureComponent {\n  state = {\n    gameState: [\n      [{ id: 'heart_k' }, { id: 'club_2' }, { id: 'diamond_10' }, { id: 'heart_3' }, { id: 'heart_6' }, { id: 'spade_a' }, { id: 'spade_10' }],\n      [{ id: 'diamond_2' }, { id: 'spade_7' }, { id: 'diamond_6' }, { id: 'spade_5' }, { id: 'club_10' }, { id: 'diamond_k' }, { id: 'heart_8' }],\n      [{ id: 'spade_9' }, { id: 'heart_4' }, { id: 'club_q' }, { id: 'spade_4' }, { id: 'club_7' }, { id: 'spade_2' }, { id: 'club_9' }],\n      [{ id: 'heart_a' }, { id: 'spade_8' }, { id: 'diamond_4' }, { id: 'heart_j' }, { id: 'heart_q' }, { id: 'diamond_9' }, { id: 'spade_q' }],\n      [{ id: 'club_8' }, { id: 'diamond_q' }, { id: 'heart_9' }, { id: 'club_k' }, { id: 'spade_k' }, { id: 'diamond_a' }],\n      [{ id: 'heart_10' }, { id: 'club_a' }, { id: 'diamond_7' }, { id: 'heart_2' }, { id: 'club_j' }, { id: 'spade_6' }],\n      [{ id: 'club_6' }, { id: 'diamond_3' }, { id: 'heart_5' }, { id: 'diamond_j' }, { id: 'diamond_5' }, { id: 'heart_7' }],\n      [{ id: 'spade_3' }, { id: 'diamond_8' }, { id: 'club_5' }, { id: 'club_3' }, { id: 'spade_j' }, { id: 'club_4' }],\n    ],\n    history: [],\n    draggingStartPos: { x: 0, y: 0 },\n    draggingCards: [],\n    prevDraggingCardsPos: { deckIndex: 0, cardIndex: 0 }\n  }\n\n  moveCardsToDrag = (deckIndex, cardIndex, startPos) => {\n    const { gameState } = this.state\n\n    const updatedDeckCards = gameState[deckIndex].slice(0, cardIndex)\n    const toDraggingCards = gameState[deckIndex].slice(cardIndex)\n\n    this.setState(state => ({\n      gameState: [\n        ...state.gameState.slice(0, deckIndex),\n        updatedDeckCards,\n        ...state.gameState.slice(deckIndex + 1)\n      ],\n      draggingCards: toDraggingCards,\n      draggingStartPos: startPos,\n      prevDraggingCardsPos: { deckIndex, cardIndex }\n    }))\n  }\n\n  moveDraggingCardsToPuzzle = (deckIndex) => {\n    const { gameState, draggingCards, prevDraggingCardsPos } = this.state\n    const targetDeckIndex = deckIndex || prevDraggingCardsPos.deckIndex\n\n    const updatedDeckCards = gameState[targetDeckIndex].concat(draggingCards)\n\n    this.setState(state => ({\n      gameState: [\n        ...state.gameState.slice(0, targetDeckIndex),\n        updatedDeckCards,\n        ...state.gameState.slice(targetDeckIndex + 1)\n      ]\n    }))\n\n    setTimeout(() => this.setState(() => ({\n      draggingCards: [],\n      draggingStartPos: { x: 0, y: 0 },\n      prevDraggingCardsPos: { deckIndex: 0, cardIndex: 0 }\n    })), 30)\n  }\n\n  render = () => {\n    const { gameState, draggingStartPos, draggingCards, prevDraggingCardsPos } = this.state\n    \n    return (\n      <FreeCellCanvas\n        gameState={gameState}\n        draggingStartPos={draggingStartPos}\n        draggingCards={draggingCards}\n        prevDraggingCardsPos={prevDraggingCardsPos}\n        moveCardsToDrag={this.moveCardsToDrag}\n        moveDraggingCardsToPuzzle={this.moveDraggingCardsToPuzzle}\n      />\n    )\n  }\n}\n\nexport default FreeCellBoard\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport { ImageDataProvider } from '../contexts/ImageDataContext'\n\nimport SEO from \"../layouts/SEO\"\nimport GlobalStyles from \"../layouts/GlobalStyles\"\nimport FreeCellBoard from \"../components/FreeCellBoard\"\n\nexport default ({ data }) => (\n  <ImageDataProvider imageData={data}>\n    <SEO title=\"Retro Free Cell\" />\n    <GlobalStyles />\n\n    <FreeCellBoard />\n  </ImageDataProvider>\n)\n\nexport const query = graphql`\n  query {\n    club_a: file(relativePath: { eq: \"cards/club_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_2: file(relativePath: { eq: \"cards/club_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_3: file(relativePath: { eq: \"cards/club_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_4: file(relativePath: { eq: \"cards/club_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_5: file(relativePath: { eq: \"cards/club_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_6: file(relativePath: { eq: \"cards/club_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_7: file(relativePath: { eq: \"cards/club_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_8: file(relativePath: { eq: \"cards/club_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_9: file(relativePath: { eq: \"cards/club_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_10: file(relativePath: { eq: \"cards/club_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_j: file(relativePath: { eq: \"cards/club_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_q: file(relativePath: { eq: \"cards/club_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_k: file(relativePath: { eq: \"cards/club_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_a: file(relativePath: { eq: \"cards/diamond_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_2: file(relativePath: { eq: \"cards/diamond_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_3: file(relativePath: { eq: \"cards/diamond_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_4: file(relativePath: { eq: \"cards/diamond_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_5: file(relativePath: { eq: \"cards/diamond_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_6: file(relativePath: { eq: \"cards/diamond_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_7: file(relativePath: { eq: \"cards/diamond_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_8: file(relativePath: { eq: \"cards/diamond_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_9: file(relativePath: { eq: \"cards/diamond_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_10: file(relativePath: { eq: \"cards/diamond_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_j: file(relativePath: { eq: \"cards/diamond_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_q: file(relativePath: { eq: \"cards/diamond_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_k: file(relativePath: { eq: \"cards/diamond_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_a: file(relativePath: { eq: \"cards/heart_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_2: file(relativePath: { eq: \"cards/heart_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_3: file(relativePath: { eq: \"cards/heart_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_4: file(relativePath: { eq: \"cards/heart_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_5: file(relativePath: { eq: \"cards/heart_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_6: file(relativePath: { eq: \"cards/heart_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_7: file(relativePath: { eq: \"cards/heart_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_8: file(relativePath: { eq: \"cards/heart_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_9: file(relativePath: { eq: \"cards/heart_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_10: file(relativePath: { eq: \"cards/heart_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_j: file(relativePath: { eq: \"cards/heart_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_q: file(relativePath: { eq: \"cards/heart_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    heart_k: file(relativePath: { eq: \"cards/heart_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_a: file(relativePath: { eq: \"cards/spade_a.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_2: file(relativePath: { eq: \"cards/spade_2.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_3: file(relativePath: { eq: \"cards/spade_3.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_4: file(relativePath: { eq: \"cards/spade_4.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_5: file(relativePath: { eq: \"cards/spade_5.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_6: file(relativePath: { eq: \"cards/spade_6.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_7: file(relativePath: { eq: \"cards/spade_7.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_8: file(relativePath: { eq: \"cards/spade_8.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_9: file(relativePath: { eq: \"cards/spade_9.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_10: file(relativePath: { eq: \"cards/spade_10.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_j: file(relativePath: { eq: \"cards/spade_j.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_q: file(relativePath: { eq: \"cards/spade_q.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    spade_k: file(relativePath: { eq: \"cards/spade_k.png\" }) {\n      childImageSharp { fixed(width: 200) { ...GatsbyImageSharpFixed } }\n    }\n    club_watermark: file(relativePath: { eq: \"img_watermark_club.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n    diamond_watermark: file(relativePath: { eq: \"img_watermark_diamond.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n    heart_watermark: file(relativePath: { eq: \"img_watermark_heart.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n    spade_watermark: file(relativePath: { eq: \"img_watermark_spade.png\" }) {\n      childImageSharp { fixed(width: 120) { ...GatsbyImageSharpFixed } }\n    }\n  }\n`\n"],"sourceRoot":""}